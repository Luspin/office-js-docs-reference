### YamlMime:TSType
name: Excel.RangeHyperlink
uid: 'office!Excel.RangeHyperlink:interface'
package: office!
fullName: Excel.RangeHyperlink
summary: Represents the necessary strings to get/set a hyperlink (XHL) object.
remarks: '\[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: address
    uid: 'office!Excel.RangeHyperlink#address:member'
    package: office!
    fullName: address
    summary: Represents the URL target for the hyperlink.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Orders");

          let productsRange = sheet.getRange("A3:A5");
          productsRange.load("values");

          await context.sync();

          // Create a hyperlink to a URL 
          // for each product name in the first table.
          for (let i = 0; i < productsRange.values.length; i++) {
              let cellRange = productsRange.getCell(i, 0);
              let cellText = productsRange.values[i][0];

              let hyperlink = {
                  textToDisplay: cellText,
                  screenTip: "Search Bing for '" + cellText + "'",
                  address: "https://www.bing.com?q=" + cellText
              }
              cellRange.hyperlink = hyperlink;
          }

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'address?: string;'
      return:
        type: string
  - name: documentReference
    uid: 'office!Excel.RangeHyperlink#documentReference:member'
    package: office!
    fullName: documentReference
    summary: Represents the document reference target for the hyperlink.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Orders");

          let productsRange = sheet.getRange("A9:A11");
          productsRange.load("values");

          await context.sync();

          // Create a hyperlink to a location within the workbook
          // for each product name in the second table.
          for (let i = 0; i < productsRange.values.length; i++) {
              let cellRange = productsRange.getCell(i, 0);
              let cellText = productsRange.values[i][0];

              let hyperlink = {
                  textToDisplay: cellText,
                  screenTip: "Navigate to the '" + cellText + "' worksheet",
                  documentReference: cellText + "!A1"
              }
              cellRange.hyperlink = hyperlink;
          }

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'documentReference?: string;'
      return:
        type: string
  - name: screenTip
    uid: 'office!Excel.RangeHyperlink#screenTip:member'
    package: office!
    fullName: screenTip
    summary: Represents the string displayed when hovering over the hyperlink.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Orders");

          let productsRange = sheet.getRange("A3:A5");
          productsRange.load("values");

          await context.sync();

          // Create a hyperlink to a URL 
          // for each product name in the first table.
          for (let i = 0; i < productsRange.values.length; i++) {
              let cellRange = productsRange.getCell(i, 0);
              let cellText = productsRange.values[i][0];

              let hyperlink = {
                  textToDisplay: cellText,
                  screenTip: "Search Bing for '" + cellText + "'",
                  address: "https://www.bing.com?q=" + cellText
              }
              cellRange.hyperlink = hyperlink;
          }

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'screenTip?: string;'
      return:
        type: string
  - name: textToDisplay
    uid: 'office!Excel.RangeHyperlink#textToDisplay:member'
    package: office!
    fullName: textToDisplay
    summary: Represents the string that is displayed in the top left most cell in the range.
    remarks: >-
      \[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/range-hyperlink.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Orders");

          let productsRange = sheet.getRange("A3:A5");
          productsRange.load("values");

          await context.sync();

          // Create a hyperlink to a URL 
          // for each product name in the first table.
          for (let i = 0; i < productsRange.values.length; i++) {
              let cellRange = productsRange.getCell(i, 0);
              let cellText = productsRange.values[i][0];

              let hyperlink = {
                  textToDisplay: cellText,
                  screenTip: "Search Bing for '" + cellText + "'",
                  address: "https://www.bing.com?q=" + cellText
              }
              cellRange.hyperlink = hyperlink;
          }

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'textToDisplay?: string;'
      return:
        type: string
