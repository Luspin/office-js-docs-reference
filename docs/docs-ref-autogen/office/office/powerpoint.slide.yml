### YamlMime:TSType
name: PowerPoint.Slide
uid: 'office!PowerPoint.Slide:class'
package: office!
fullName: PowerPoint.Slide
summary: Represents a single slide of a presentation.
remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'office!PowerPoint.Slide#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!PowerPoint.RequestContext:class" />'
  - name: id
    uid: 'office!PowerPoint.Slide#id:member'
    package: office!
    fullName: id
    summary: Gets the unique ID of the slide.
    remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: layout
    uid: 'office!PowerPoint.Slide#layout:member'
    package: office!
    fullName: layout
    summary: Gets the layout of the slide.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly layout: PowerPoint.SlideLayout;'
      return:
        type: '<xref uid="office!PowerPoint.SlideLayout:class" />'
  - name: shapes
    uid: 'office!PowerPoint.Slide#shapes:member'
    package: office!
    fullName: shapes
    summary: Returns a collection of shapes in the slide.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly shapes: PowerPoint.ShapeCollection;'
      return:
        type: '<xref uid="office!PowerPoint.ShapeCollection:class" />'
  - name: slideMaster
    uid: 'office!PowerPoint.Slide#slideMaster:member'
    package: office!
    fullName: slideMaster
    summary: Gets the `SlideMaster` object that represents the slide's default content.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly slideMaster: PowerPoint.SlideMaster;'
      return:
        type: '<xref uid="office!PowerPoint.SlideMaster:class" />'
  - name: tags
    uid: 'office!PowerPoint.Slide#tags:member'
    package: office!
    fullName: tags
    summary: Returns a collection of tags in the slide.
    remarks: '\[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly tags: PowerPoint.TagCollection;'
      return:
        type: '<xref uid="office!PowerPoint.TagCollection:class" />'
methods:
  - name: delete()
    uid: 'office!PowerPoint.Slide#delete:member(1)'
    package: office!
    fullName: delete()
    summary: Deletes the slide from the presentation. Does nothing if the slide does not exist.
    remarks: >-
      \[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

      // Deletes the selected slides.

      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        const slides = context.presentation.getSelectedSlides();
        const slideCount = slides.getCount();
        slides.load("items");
        await context.sync();
        slides.items.map((slide) => {
          slide.delete();
        });
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: load(options)
    uid: 'office!PowerPoint.Slide#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: PowerPoint.Interfaces.SlideLoadOptions): PowerPoint.Slide;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!PowerPoint.Interfaces.SlideLoadOptions:interface" />'
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!PowerPoint.Slide#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.Slide;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!PowerPoint.Slide#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): PowerPoint.Slide;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />'
        description: ''
  - name: setSelectedShapes(shapeIds)
    uid: 'office!PowerPoint.Slide#setSelectedShapes:member(1)'
    package: office!
    fullName: setSelectedShapes(shapeIds)
    summary: Selects the specified shapes. Existing shape selection is replaced with the new selection.
    remarks: >-
      \[ [API set: PowerPointApi 1.5](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/shapes/get-set-shapes.yaml

      // Reselects shapes that were saved previously.

      await PowerPoint.run(async (context) => {
        const slide1 = context.presentation.slides.getItem(savedSlideSelection[0]);
        await context.sync();
        slide1.setSelectedShapes(savedShapeSelection);
        await context.sync();
      });


      ...

      // Selects the first two shapes on slide 1.

      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        const slide1 = context.presentation.slides.getItemAt(0);
        slide1.load("shapes");
        await context.sync();
        const shapes = slide1.shapes;
        const shape1 = shapes.getItemAt(0);
        const shape2 = shapes.getItemAt(1);
        shape1.load("id");
        shape2.load("id");
        await context.sync();
        slide1.setSelectedShapes([shape1.id, shape2.id]);
        await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setSelectedShapes(shapeIds: string[]): void;'
      parameters:
        - id: shapeIds
          description: 'List of shape IDs to select in the slide. If the list is empty, the selection is cleared.'
          type: 'string[]'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!PowerPoint.Slide#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original PowerPoint.Slide object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `PowerPoint.Interfaces.SlideData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.SlideData;'
      return:
        type: '<xref uid="office!PowerPoint.Interfaces.SlideData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
