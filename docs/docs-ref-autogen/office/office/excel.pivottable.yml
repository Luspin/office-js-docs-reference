### YamlMime:TSType
name: Excel.PivotTable
uid: 'office!Excel.PivotTable:class'
package: office!
fullName: Excel.PivotTable
summary: >-
  Represents an Excel PivotTable. To learn more about the PivotTable object model, read [Work with PivotTables using the
  Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-pivottables)<!-- -->.
remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: allowMultipleFiltersPerField
    uid: 'office!Excel.PivotTable#allowMultipleFiltersPerField:member'
    package: office!
    fullName: allowMultipleFiltersPerField
    summary: Specifies if the PivotTable allows the application of multiple PivotFilters on a given PivotField in the table.
    remarks: '\[ [API set: ExcelApi 1.12](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowMultipleFiltersPerField: boolean;'
      return:
        type: boolean
  - name: columnHierarchies
    uid: 'office!Excel.PivotTable#columnHierarchies:member'
    package: office!
    fullName: columnHierarchies
    summary: The Column Pivot Hierarchies of the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

      await Excel.run(async (context) => {
          const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");       

          // Check if the PivotTable already has a column.
          const column = pivotTable.columnHierarchies.getItemOrNullObject("Farm");
          column.load("id");
          await context.sync();

          if (column.isNullObject) {
              // Adding the farm column to the column hierarchy automatically removes it from the row hierarchy.
              pivotTable.columnHierarchies.add(pivotTable.hierarchies.getItem("Farm"));
          } else {
              pivotTable.columnHierarchies.remove(column);
          }

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly columnHierarchies: Excel.RowColumnPivotHierarchyCollection;'
      return:
        type: '<xref uid="office!Excel.RowColumnPivotHierarchyCollection:class" />'
  - name: context
    uid: 'office!Excel.PivotTable#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: dataHierarchies
    uid: 'office!Excel.PivotTable#dataHierarchies:member'
    package: office!
    fullName: dataHierarchies
    summary: The Data Pivot Hierarchies of the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

      await Excel.run(async (context) => {
          const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
          pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold at Farm"));
          pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem("Crates Sold Wholesale"));

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataHierarchies: Excel.DataPivotHierarchyCollection;'
      return:
        type: '<xref uid="office!Excel.DataPivotHierarchyCollection:class" />'
  - name: enableDataValueEditing
    uid: 'office!Excel.PivotTable#enableDataValueEditing:member'
    package: office!
    fullName: enableDataValueEditing
    summary: Specifies if the PivotTable allows values in the data body to be edited by the user.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableDataValueEditing: boolean;'
      return:
        type: boolean
  - name: filterHierarchies
    uid: 'office!Excel.PivotTable#filterHierarchies:member'
    package: office!
    fullName: filterHierarchies
    summary: The Filter Pivot Hierarchies of the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-filters-and-summaries.yaml

      async function filter(functionType: Excel.AggregationFunction) {
          await Excel.run(async (context) => {
              const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
              const filters = pivotTable.filterHierarchies;
              const filter = filters.getItemOrNullObject("Classification");
              filter.load();
              await context.sync();

              // Add the Classification hierarchy to the filter, if it's not already there.
              if (filter.isNullObject) {
                  filters.add(pivotTable.hierarchies.getItem("Classification"));
                  await context.sync();
              }
          });
      }

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly filterHierarchies: Excel.FilterPivotHierarchyCollection;'
      return:
        type: '<xref uid="office!Excel.FilterPivotHierarchyCollection:class" />'
  - name: hierarchies
    uid: 'office!Excel.PivotTable#hierarchies:member'
    package: office!
    fullName: hierarchies
    summary: The Pivot Hierarchies of the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly hierarchies: Excel.PivotHierarchyCollection;'
      return:
        type: '<xref uid="office!Excel.PivotHierarchyCollection:class" />'
  - name: id
    uid: 'office!Excel.PivotTable#id:member'
    package: office!
    fullName: id
    summary: ID of the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.5](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: layout
    uid: 'office!Excel.PivotTable#layout:member'
    package: office!
    fullName: layout
    summary: The PivotLayout describing the layout and visual structure of the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

      await Excel.run(async (context) => {
          const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem("Farm Sales");
          pivotTable.layout.load("layoutType");
          await context.sync();

          // Cycle between the three layout types.
          if (pivotTable.layout.layoutType === "Compact") {
              pivotTable.layout.layoutType = "Outline";
          } else if (pivotTable.layout.layoutType === "Outline") {
              pivotTable.layout.layoutType = "Tabular";
          } else {
              pivotTable.layout.layoutType = "Compact";
          }
          await context.sync();
          console.log("Pivot layout is now " + pivotTable.layout.layoutType);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly layout: Excel.PivotLayout;'
      return:
        type: '<xref uid="office!Excel.PivotLayout:class" />'
  - name: name
    uid: 'office!Excel.PivotTable#name:member'
    package: office!
    fullName: name
    summary: Name of the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: refreshOnOpen
    uid: 'office!Excel.PivotTable#refreshOnOpen:member'
    package: office!
    fullName: refreshOnOpen
    summary: >-
      Specifies whether the PivotTable refreshes when the workbook opens. Corresponds to "Refresh on load" setting in
      the UI.
    remarks: '\[ [API set: ExcelApi 1.13](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'refreshOnOpen: boolean;'
      return:
        type: boolean
  - name: rowHierarchies
    uid: 'office!Excel.PivotTable#rowHierarchies:member'
    package: office!
    fullName: rowHierarchies
    summary: The Row Pivot Hierarchies of the PivotTable.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rowHierarchies: Excel.RowColumnPivotHierarchyCollection;'
      return:
        type: '<xref uid="office!Excel.RowColumnPivotHierarchyCollection:class" />'
  - name: useCustomSortLists
    uid: 'office!Excel.PivotTable#useCustomSortLists:member'
    package: office!
    fullName: useCustomSortLists
    summary: Specifies if the PivotTable uses custom lists when sorting.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useCustomSortLists: boolean;'
      return:
        type: boolean
  - name: worksheet
    uid: 'office!Excel.PivotTable#worksheet:member'
    package: office!
    fullName: worksheet
    summary: The worksheet containing the current PivotTable.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type: '<xref uid="office!Excel.Worksheet:class" />'
methods:
  - name: delete()
    uid: 'office!Excel.PivotTable#delete:member(1)'
    package: office!
    fullName: delete()
    summary: Deletes the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-create-and-modify.yaml

      await Excel.run(async (context) => {
          context.workbook.worksheets.getItem("Pivot").pivotTables.getItem("Farm Sales").delete();

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getDataSourceString()
    uid: 'office!Excel.PivotTable#getDataSourceString:member(1)'
    package: office!
    fullName: getDataSourceString()
    summary: >-
      Returns the string representation of the data source for the PivotTable. This method currently supports string
      representations for table and range objects. Otherwise, it returns an empty string.
    remarks: >-
      \[ [API set: ExcelApi 1.15](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-source-data.yaml

      // This function logs information about the data source of a PivotTable.

      await Excel.run(async (context) => {
        const worksheet = context.workbook.worksheets.getItem("TotalPivot");
        const pivotTable = worksheet.pivotTables.getItem("All Farm Sales");

        // Retrieve the type and string representation of the data source of the PivotTable.
        const pivotTableDataSourceType = pivotTable.getDataSourceType();
        const pivotTableDataSourceString = pivotTable.getDataSourceString();
        await context.sync();

        // Log the data source information.
        console.log("Data source: " + pivotTableDataSourceString.value);
        console.log("Source type: " + pivotTableDataSourceType.value);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataSourceString(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getDataSourceType()
    uid: 'office!Excel.PivotTable#getDataSourceType:member(1)'
    package: office!
    fullName: getDataSourceType()
    summary: Gets the type of the data source for the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.15](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-source-data.yaml

      // This function logs information about the data source of a PivotTable.

      await Excel.run(async (context) => {
        const worksheet = context.workbook.worksheets.getItem("TotalPivot");
        const pivotTable = worksheet.pivotTables.getItem("All Farm Sales");

        // Retrieve the type and string representation of the data source of the PivotTable.
        const pivotTableDataSourceType = pivotTable.getDataSourceType();
        const pivotTableDataSourceString = pivotTable.getDataSourceString();
        await context.sync();

        // Log the data source information.
        console.log("Data source: " + pivotTableDataSourceString.value);
        console.log("Source type: " + pivotTableDataSourceType.value);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataSourceType(): OfficeExtension.ClientResult<Excel.DataSourceType>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.ClientResult:class" />&lt;<xref uid="office!Excel.DataSourceType:enum"
          />&gt;
        description: ''
  - name: load(options)
    uid: 'office!Excel.PivotTable#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.PivotTableLoadOptions): Excel.PivotTable;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Excel.Interfaces.PivotTableLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Excel.PivotTable:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.PivotTable#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.PivotTable;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.PivotTable:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.PivotTable#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.PivotTable;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Excel.PivotTable:class" />'
        description: ''
  - name: refresh()
    uid: 'office!Excel.PivotTable#refresh:member(1)'
    package: office!
    fullName: refresh()
    summary: Refreshes the PivotTable.
    remarks: >-
      \[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-refresh.yaml

      // This function refreshes the "Farm Sales" PivotTable,

      // which updates the PivotTable with changes made to the source table.

      await Excel.run(async (context) => {
        const pivotTable = context.workbook.pivotTables.getItem("Farm Sales");
        pivotTable.refresh();
        await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'refresh(): void;'
      return:
        type: void
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Excel.PivotTable#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.PivotTableUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Excel.Interfaces.PivotTableUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Excel.PivotTable#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.PivotTable): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Excel.PivotTable:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Excel.PivotTable#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.PivotTable object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Excel.Interfaces.PivotTableData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.PivotTableData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.PivotTableData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
