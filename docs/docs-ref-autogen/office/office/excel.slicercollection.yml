### YamlMime:TSType
name: Excel.SlicerCollection
uid: 'office!Excel.SlicerCollection:class'
package: office!
fullName: Excel.SlicerCollection
summary: Represents a collection of all the slicer objects in the workbook or a worksheet.
remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'office!Excel.SlicerCollection#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: items
    uid: 'office!Excel.SlicerCollection#items:member'
    package: office!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type: '<xref uid="office!Excel.Slicer:class" />[]'
methods:
  - name: 'add(slicerSource, sourceField, slicerDestination)'
    uid: 'office!Excel.SlicerCollection#add:member(1)'
    package: office!
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    summary: Adds a new slicer to the workbook.
    remarks: >-
      \[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Pivot");
          const slicer = sheet.slicers.add(
              "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
              "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
          );
          slicer.name = "Fruit Slicer";
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn,
        slicerDestination?: string | Worksheet): Excel.Slicer;
      parameters:
        - id: slicerSource
          description: >-
            The data source that the new slicer will be based on. It can be a `PivotTable` object, a `Table` object, or
            a string. When a PivotTable object is passed, the data source is the source of the `PivotTable` object. When
            a `Table` object is passed, the data source is the `Table` object. When a string is passed, it is
            interpreted as the name or ID of a PivotTable or table.
          type: 'string | <xref uid="office!Excel.PivotTable:class" /> | <xref uid="office!Excel.Table:class" />'
        - id: sourceField
          description: >-
            The field in the data source to filter by. It can be a `PivotField` object, a `TableColumn` object, the ID
            of a `PivotField` or the name or ID of a `TableColumn`<!-- -->.
          type: >-
            string | <xref uid="office!Excel.PivotField:class" /> | number | <xref uid="office!Excel.TableColumn:class"
            />
        - id: slicerDestination
          description: >-
            Optional. The worksheet in which the new slicer will be created. It can be a `Worksheet` object or the name
            or ID of a worksheet. This parameter can be omitted if the slicer collection is retrieved from a worksheet.
          type: 'string | <xref uid="office!Excel.Worksheet:class" />'
      return:
        type: '<xref uid="office!Excel.Slicer:class" />'
        description: The new slicer.
  - name: getCount()
    uid: 'office!Excel.SlicerCollection#getCount:member(1)'
    package: office!
    fullName: getCount()
    summary: Returns the number of slicers in the collection.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(key)
    uid: 'office!Excel.SlicerCollection#getItem:member(1)'
    package: office!
    fullName: getItem(key)
    summary: Gets a slicer object using its name or ID.
    remarks: >-
      \[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-slicer.yaml

      await Excel.run(async (context) => {
          const slicer = context.workbook.slicers.getItem("Fruit Slicer");
          slicer.caption = "Fruit Types";
          slicer.left = 395;
          slicer.top = 15;
          slicer.height = 135;
          slicer.width = 150;
          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      parameters:
        - id: key
          description: The name or ID of the slicer.
          type: string
      return:
        type: '<xref uid="office!Excel.Slicer:class" />'
        description: ''
  - name: getItemAt(index)
    uid: 'office!Excel.SlicerCollection#getItemAt:member(1)'
    package: office!
    fullName: getItemAt(index)
    summary: Gets a slicer based on its position in the collection.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="office!Excel.Slicer:class" />'
        description: ''
  - name: getItemOrNullObject(key)
    uid: 'office!Excel.SlicerCollection#getItemOrNullObject:member(1)'
    package: office!
    fullName: getItemOrNullObject(key)
    summary: >-
      Gets a slicer using its name or ID. If the slicer doesn't exist, then this method returns an object with its
      `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi 1.10](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      parameters:
        - id: key
          description: Name or ID of the slicer to be retrieved.
          type: string
      return:
        type: '<xref uid="office!Excel.Slicer:class" />'
        description: ''
  - name: load(options)
    uid: 'office!Excel.SlicerCollection#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.SlicerCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="office!Excel.Interfaces.SlicerCollectionLoadOptions:interface" /> & <xref
            uid="office!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="office!Excel.SlicerCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.SlicerCollection#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.SlicerCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.SlicerCollection#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="office!Excel.SlicerCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'office!Excel.SlicerCollection#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.SlicerCollection` object is an API object, the `toJSON` method returns
      a plain JavaScript object (typed as `Excel.Interfaces.SlicerCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.SlicerCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
