### YamlMime:TSType
name: Excel.QueryCollection
uid: 'office!Excel.QueryCollection:class'
package: office!
fullName: Excel.QueryCollection
summary: Represents the collection of queries in the workbook.
remarks: '\[ [API set: ExcelApi 1.14](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'office!Excel.QueryCollection#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: items
    uid: 'office!Excel.QueryCollection#items:member'
    package: office!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Query[];'
      return:
        type: '<xref uid="office!Excel.Query:class" />[]'
        description: |-


          #### Examples

          ```typescript
          // This function retrieves the query collection in a workbook, 
          // loads the query items in that collection, and then
          // logs the name of each query to the console.
          await Excel.run(async (context) => {
              const queries = context.workbook.queries; 
              queries.load("items"); 
              await context.sync(); 

              console.log("Name of each query: ")
              console.log("  " + queries.items.map((query) => query.name).join("\n  "));
          });
          ```
methods:
  - name: getCount()
    uid: 'office!Excel.QueryCollection#getCount:member(1)'
    package: office!
    fullName: getCount()
    summary: Gets the number of queries in the workbook.
    remarks: |-
      \[ [API set: ExcelApi 1.14](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      // This function retrieves the query collection in a workbook and then 
      // logs the number of queries in the collection to the console.
      await Excel.run(async (context) => { 
        const queries = context.workbook.queries; 
        const count = queries.getCount();
        await context.sync();

        console.log("Query count: " + count.value);
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(key)
    uid: 'office!Excel.QueryCollection#getItem:member(1)'
    package: office!
    fullName: getItem(key)
    summary: Gets a query from the collection based on its name.
    remarks: '\[ [API set: ExcelApi 1.14](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): Excel.Query;'
      parameters:
        - id: key
          description: The name of the query case-insensitive.
          type: string
      return:
        type: '<xref uid="office!Excel.Query:class" />'
        description: 'The query with the given name. If there is no query by that name, then an error is thrown.'
  - name: load(options)
    uid: 'office!Excel.QueryCollection#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.QueryCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.QueryCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="office!Excel.Interfaces.QueryCollectionLoadOptions:interface" /> & <xref
            uid="office!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="office!Excel.QueryCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.QueryCollection#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.QueryCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.QueryCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.QueryCollection#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.QueryCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="office!Excel.QueryCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'office!Excel.QueryCollection#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.QueryCollection` object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `Excel.Interfaces.QueryCollectionData`<!-- -->) that contains an "items" array
      with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.QueryCollectionData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.QueryCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
