### YamlMime:TSType
name: Office.Location
uid: 'office!Office.Location:interface'
package: office!
fullName: Office.Location
summary: Provides methods to get and set the location of a meeting in an Outlook add-in.
remarks: >-
  \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/javascript-api-for-office) \]


  **[Minimum permission
  level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
  **read item**


  **[Applicable Outlook
  mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
  Compose
example: []
isPreview: false
isDeprecated: false
type: interface
methods:
  - name: 'getAsync(options, callback)'
    uid: 'office!Office.Location#getAsync:member(1)'
    package: office!
    fullName: 'getAsync(options, callback)'
    summary: >-
      Gets the location of an appointment.


      The `getAsync` method starts an asynchronous call to the Exchange server to get the location of an appointment.
      The location of the appointment is provided as a string in the `asyncResult.value` property.
    remarks: >-
      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/javascript-api-for-office) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      #### Examples


      ```javascript

      const userContext = { value : 1 };

      Office.context.mailbox.item.location.getAsync( { context: userContext}, callback);


      function callback(asyncResult) {
          const context = asyncResult.context;
          const location = asyncResult.value;
      }

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<string>) => void):
        void;
      parameters:
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: getAsync(callback)
    uid: 'office!Office.Location#getAsync:member(2)'
    package: office!
    fullName: getAsync(callback)
    summary: >-
      Gets the location of an appointment.


      The `getAsync` method starts an asynchronous call to the Exchange server to get the location of an appointment.
      The location of the appointment is provided as a string in the `asyncResult.value` property.
    remarks: >-
      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/javascript-api-for-office) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

      Office.context.mailbox.item.location.getAsync((result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Appointment location: ${result.value}`);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      parameters:
        - id: callback
          description: >-
            When the method completes, the function passed in the `callback` parameter is called with a single parameter
            of type `Office.AsyncResult`<!-- -->.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'setAsync(location, options, callback)'
    uid: 'office!Office.Location#setAsync:member(1)'
    package: office!
    fullName: 'setAsync(location, options, callback)'
    summary: >-
      Sets the location of an appointment.


      The `setAsync` method starts an asynchronous call to the Exchange server to set the location of an appointment.
      Setting the location of an appointment overwrites the current location.
    remarks: >-
      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/javascript-api-for-office) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      **Errors**:


      - DataExceedsMaximumSize: The location parameter is longer than 255 characters.


      #### Examples


      ```javascript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-location-appointment-organizer.yaml

      const location = "my office";

      Office.context.mailbox.item.location.setAsync(location, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set location to ${location}`);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        setAsync(location: string, options: Office.AsyncContextOptions, callback?: (asyncResult:
        Office.AsyncResult<void>) => void): void;
      parameters:
        - id: location
          description: The location of the appointment. The string is limited to 255 characters.
          type: string
        - id: options
          description: >-
            An object literal that contains one or more of the following properties:- `asyncContext`<!-- -->: Developers
            can provide any object they wish to access in the callback function.
          type: '<xref uid="office!Office.AsyncContextOptions:interface" />'
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. If setting the location fails, the `asyncResult.error`
            property will contain an error code.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
  - name: 'setAsync(location, callback)'
    uid: 'office!Office.Location#setAsync:member(2)'
    package: office!
    fullName: 'setAsync(location, callback)'
    summary: >-
      Sets the location of an appointment.


      The `setAsync` method starts an asynchronous call to the Exchange server to set the location of an appointment.
      Setting the location of an appointment overwrites the current location.
    remarks: >-
      \[ [API set: Mailbox 1.1](/office/dev/add-ins/reference/javascript-api-for-office) \]


      **[Minimum permission
      level](https://learn.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)<!-- -->**:
      **read item**


      **[Applicable Outlook
      mode](https://learn.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**:
      Compose


      **Errors**:


      - DataExceedsMaximumSize: The location parameter is longer than 255 characters.
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setAsync(location: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      parameters:
        - id: location
          description: The location of the appointment. The string is limited to 255 characters.
          type: string
        - id: callback
          description: >-
            Optional. When the method completes, the function passed in the `callback` parameter is called with a single
            parameter of type `Office.AsyncResult`<!-- -->. If setting the location fails, the `asyncResult.error`
            property will contain an error code.
          type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
      return:
        type: void
        description: ''
