### YamlMime:TSType
name: Excel.ConditionalIconCriterion
uid: 'office!Excel.ConditionalIconCriterion:interface'
package: office!
fullName: Excel.ConditionalIconCriterion
summary: >-
  Represents an icon criterion which contains a type, value, an operator, and an optional custom icon, if not using an
  icon set.
remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: customIcon
    uid: 'office!Excel.ConditionalIconCriterion#customIcon:member'
    package: office!
    fullName: customIcon
    summary: 'The custom icon for the current criterion, if different from the default icon set, else `null` will be returned.'
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'customIcon?: Excel.Icon;'
      return:
        type: '<xref uid="office!Excel.Icon:interface" />'
  - name: formula
    uid: 'office!Excel.ConditionalIconCriterion#formula:member'
    package: office!
    fullName: formula
    summary: A number or a formula depending on the type.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.iconSet);
          const iconSetCF = conditionalFormat.iconSet;
          iconSetCF.style = Excel.IconSet.threeTriangles;

          /*
              The iconSetCF.criteria array is automatically prepopulated with
              criterion elements whose properties have been given default settings.
              You can't write to each property of a criterion directly. Instead,
              replace the whole criteria object.

              With a "three*" icon set style, such as "threeTriangles", the third
              element in the criteria array (criteria[2]) defines the "top" icon;
              e.g., a green triangle. The second (criteria[1]) defines the "middle"
              icon. The first (criteria[0]) defines the "low" icon, but it
              can often be left empty as the following object shows, because every
              cell that does not match the other two criteria always gets the low
              icon.            
          */
          iconSetCF.criteria = [
              {} as any,
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=700"
              },
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=1000",
              }
          ];

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formula: string;'
      return:
        type: string
  - name: operator
    uid: 'office!Excel.ConditionalIconCriterion#operator:member'
    package: office!
    fullName: operator
    summary: '`greaterThan` or `greaterThanOrEqual` for each of the rule types for the icon conditional format.'
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.iconSet);
          const iconSetCF = conditionalFormat.iconSet;
          iconSetCF.style = Excel.IconSet.threeTriangles;

          /*
              The iconSetCF.criteria array is automatically prepopulated with
              criterion elements whose properties have been given default settings.
              You can't write to each property of a criterion directly. Instead,
              replace the whole criteria object.

              With a "three*" icon set style, such as "threeTriangles", the third
              element in the criteria array (criteria[2]) defines the "top" icon;
              e.g., a green triangle. The second (criteria[1]) defines the "middle"
              icon. The first (criteria[0]) defines the "low" icon, but it
              can often be left empty as the following object shows, because every
              cell that does not match the other two criteria always gets the low
              icon.            
          */
          iconSetCF.criteria = [
              {} as any,
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=700"
              },
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=1000",
              }
          ];

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'operator: Excel.ConditionalIconCriterionOperator | "Invalid" | "GreaterThan" | "GreaterThanOrEqual";'
      return:
        type: >-
          <xref uid="office!Excel.ConditionalIconCriterionOperator:enum" /> | "Invalid" | "GreaterThan" |
          "GreaterThanOrEqual"
  - name: type
    uid: 'office!Excel.ConditionalIconCriterion#type:member'
    package: office!
    fullName: type
    summary: What the icon conditional formula should be based on.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.iconSet);
          const iconSetCF = conditionalFormat.iconSet;
          iconSetCF.style = Excel.IconSet.threeTriangles;

          /*
              The iconSetCF.criteria array is automatically prepopulated with
              criterion elements whose properties have been given default settings.
              You can't write to each property of a criterion directly. Instead,
              replace the whole criteria object.

              With a "three*" icon set style, such as "threeTriangles", the third
              element in the criteria array (criteria[2]) defines the "top" icon;
              e.g., a green triangle. The second (criteria[1]) defines the "middle"
              icon. The first (criteria[0]) defines the "low" icon, but it
              can often be left empty as the following object shows, because every
              cell that does not match the other two criteria always gets the low
              icon.            
          */
          iconSetCF.criteria = [
              {} as any,
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=700"
              },
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=1000",
              }
          ];

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type: Excel.ConditionalFormatIconRuleType | "Invalid" | "Number" | "Percent" | "Formula" | "Percentile";'
      return:
        type: >-
          <xref uid="office!Excel.ConditionalFormatIconRuleType:enum" /> | "Invalid" | "Number" | "Percent" | "Formula"
          | "Percentile"
