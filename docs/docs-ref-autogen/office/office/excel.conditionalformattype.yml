### YamlMime:TSEnum
name: Excel.ConditionalFormatType
uid: 'office!Excel.ConditionalFormatType:enum'
package: office!
fullName: Excel.ConditionalFormatType
summary: ''
remarks: >-
  \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


  #### Examples


  ```typescript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-advanced.yaml

  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getItem("Sample");
      queueCommandsToClearAllConditionalFormats(sheet);

      const temperatureDataRange = sheet.tables.getItem("TemperatureTable").getDataBodyRange();

      /* When the priority property of ConditionalFormat objects 
         is not explicitly set, they are prioritized in the order
         that they are added, with zero-based numbering: 0, 1, ...
         Contradictions are resolved in favor of the format with
         the lower priority number. In the example below, negative
         numbers will get a green background, but NOT a blue font,
         because priority goes to the format that gives them a red font.
      */

      // Set low numbers to bold, dark red font. This format will
      // get priority 0.
      const presetFormat = temperatureDataRange.conditionalFormats
          .add(Excel.ConditionalFormatType.presetCriteria);
      presetFormat.preset.format.font.color = "red";
      presetFormat.preset.format.font.bold = true;
      presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };

       // Set negative numbers to blue font with green background. 
       // This format will get priority 1.
      const cellValueFormat = temperatureDataRange.conditionalFormats
          .add(Excel.ConditionalFormatType.cellValue);
      cellValueFormat.cellValue.format.font.color = "blue";
      cellValueFormat.cellValue.format.fill.color = "lightgreen";
      cellValueFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

      await context.sync();
  });

  ```
example: []
isPreview: false
isDeprecated: false
fields:
  - name: cellValue
    uid: 'office!Excel.ConditionalFormatType.cellValue:member'
    package: office!
    summary: ''
    value: '"CellValue"'
  - name: colorScale
    uid: 'office!Excel.ConditionalFormatType.colorScale:member'
    package: office!
    summary: ''
    value: '"ColorScale"'
  - name: containsText
    uid: 'office!Excel.ConditionalFormatType.containsText:member'
    package: office!
    summary: ''
    value: '"ContainsText"'
  - name: custom
    uid: 'office!Excel.ConditionalFormatType.custom:member'
    package: office!
    summary: ''
    value: '"Custom"'
  - name: dataBar
    uid: 'office!Excel.ConditionalFormatType.dataBar:member'
    package: office!
    summary: ''
    value: '"DataBar"'
  - name: iconSet
    uid: 'office!Excel.ConditionalFormatType.iconSet:member'
    package: office!
    summary: ''
    value: '"IconSet"'
  - name: presetCriteria
    uid: 'office!Excel.ConditionalFormatType.presetCriteria:member'
    package: office!
    summary: ''
    value: '"PresetCriteria"'
  - name: topBottom
    uid: 'office!Excel.ConditionalFormatType.topBottom:member'
    package: office!
    summary: ''
    value: '"TopBottom"'
