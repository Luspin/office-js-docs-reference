### YamlMime:TSEnum
name: Excel.FillPattern
uid: 'office!Excel.FillPattern:enum'
package: office!
fullName: Excel.FillPattern
summary: ''
remarks: >-
  \[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


  #### Examples


  ```typescript

  // Link to full sample:
  https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/42-range/cell-properties.yaml

  await Excel.run(async (context) => {
      const sheet = context.workbook.worksheets.getActiveWorksheet();

      // Creating the SettableCellProperties objects to use for the range.
      // In your add-in, these should be created once, outside the function.
      const topHeaderProps: Excel.SettableCellProperties = {
          // The style property takes a string matching the name of an Excel style.
          // Built-in style names are listed in the `BuiltInStyle` enum.
          // Note that a style will overwrite any formatting,
          // so do not use the format property with the style property.
          style: "Heading1"
      };

      const headerProps: Excel.SettableCellProperties = {
          // Any subproperties of format that are not set will not be changed when these cell properties are set.
          format: {
              fill: {
                  color: "Blue"
              },
              font: {
                  color: "White",
                  bold: true
              }
          }
      };

      const nonApplicableProps: Excel.SettableCellProperties = {
          format: {
              fill: {
                  pattern: Excel.FillPattern.gray25
              },
              font: {
                  color: "Gray",
                  italic: true
              }
          }
      };

      const matchupScoreProps: Excel.SettableCellProperties = {
          format: {
              borders: {
                  bottom: {
                      style: Excel.BorderLineStyle.continuous
                  },
                  left: {
                      style: Excel.BorderLineStyle.continuous
                  },
                  right: {
                      style: Excel.BorderLineStyle.continuous
                  },
                  top: {
                      style: Excel.BorderLineStyle.continuous
                  }
              }
          }
      };

      const range = sheet.getRange("A1:E5");

      // You can use empty JSON objects to avoid changing a cell's properties.
      range.setCellProperties([
          [topHeaderProps, {}, {}, {}, {}],
          [{}, {}, headerProps, headerProps, headerProps],
          [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
          [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
          [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
      ]);

      sheet.getUsedRange().format.autofitColumns();
      await context.sync();
  });

  ```
example: []
isPreview: false
isDeprecated: false
fields:
  - name: checker
    uid: 'office!Excel.FillPattern.checker:member'
    package: office!
    summary: ''
    value: '"Checker"'
  - name: crissCross
    uid: 'office!Excel.FillPattern.crissCross:member'
    package: office!
    summary: ''
    value: '"CrissCross"'
  - name: down
    uid: 'office!Excel.FillPattern.down:member'
    package: office!
    summary: ''
    value: '"Down"'
  - name: gray16
    uid: 'office!Excel.FillPattern.gray16:member'
    package: office!
    summary: ''
    value: '"Gray16"'
  - name: gray25
    uid: 'office!Excel.FillPattern.gray25:member'
    package: office!
    summary: ''
    value: '"Gray25"'
  - name: gray50
    uid: 'office!Excel.FillPattern.gray50:member'
    package: office!
    summary: ''
    value: '"Gray50"'
  - name: gray75
    uid: 'office!Excel.FillPattern.gray75:member'
    package: office!
    summary: ''
    value: '"Gray75"'
  - name: gray8
    uid: 'office!Excel.FillPattern.gray8:member'
    package: office!
    summary: ''
    value: '"Gray8"'
  - name: grid
    uid: 'office!Excel.FillPattern.grid:member'
    package: office!
    summary: ''
    value: '"Grid"'
  - name: horizontal
    uid: 'office!Excel.FillPattern.horizontal:member'
    package: office!
    summary: ''
    value: '"Horizontal"'
  - name: lightDown
    uid: 'office!Excel.FillPattern.lightDown:member'
    package: office!
    summary: ''
    value: '"LightDown"'
  - name: lightHorizontal
    uid: 'office!Excel.FillPattern.lightHorizontal:member'
    package: office!
    summary: ''
    value: '"LightHorizontal"'
  - name: lightUp
    uid: 'office!Excel.FillPattern.lightUp:member'
    package: office!
    summary: ''
    value: '"LightUp"'
  - name: lightVertical
    uid: 'office!Excel.FillPattern.lightVertical:member'
    package: office!
    summary: ''
    value: '"LightVertical"'
  - name: linearGradient
    uid: 'office!Excel.FillPattern.linearGradient:member'
    package: office!
    summary: ''
    value: '"LinearGradient"'
  - name: none
    uid: 'office!Excel.FillPattern.none:member'
    package: office!
    summary: ''
    value: '"None"'
  - name: rectangularGradient
    uid: 'office!Excel.FillPattern.rectangularGradient:member'
    package: office!
    summary: ''
    value: '"RectangularGradient"'
  - name: semiGray75
    uid: 'office!Excel.FillPattern.semiGray75:member'
    package: office!
    summary: ''
    value: '"SemiGray75"'
  - name: solid
    uid: 'office!Excel.FillPattern.solid:member'
    package: office!
    summary: ''
    value: '"Solid"'
  - name: up
    uid: 'office!Excel.FillPattern.up:member'
    package: office!
    summary: ''
    value: '"Up"'
  - name: vertical
    uid: 'office!Excel.FillPattern.vertical:member'
    package: office!
    summary: ''
    value: '"Vertical"'
