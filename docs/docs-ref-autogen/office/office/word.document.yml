### YamlMime:TSType
name: Word.Document
uid: 'office!Word.Document:class'
package: office!
fullName: Word.Document
summary: >-
  The Document object is the top level object. A Document object contains one or more sections, content controls, and
  the body that contains the contents of the document.
remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: body
    uid: 'office!Word.Document#body:member'
    package: office!
    fullName: body
    summary: >-
      Gets the body object of the main document. The body is the text that excludes headers, footers, footnotes,
      textboxes, etc.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly body: Word.Body;'
      return:
        type: '<xref uid="office!Word.Body:class" />'
  - name: changeTrackingMode
    uid: 'office!Word.Document#changeTrackingMode:member'
    package: office!
    fullName: changeTrackingMode
    summary: Gets or sets the ChangeTracking mode.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-change-tracking.yaml

      // Get the current change tracking mode.

      await Word.run(async (context) => {
        const document = context.document;
        document.load("changeTrackingMode");
        await context.sync();

        if (document.changeTrackingMode === Word.ChangeTrackingMode.trackMineOnly) {
          console.log("Only my changes are being tracked.");
        } else if (document.changeTrackingMode === Word.ChangeTrackingMode.trackAll) {
          console.log("Everyone's changes are being tracked.");
        } else {
          console.log("No changes are being tracked.");
        }
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeTrackingMode: Word.ChangeTrackingMode | "Off" | "TrackAll" | "TrackMineOnly";'
      return:
        type: '<xref uid="office!Word.ChangeTrackingMode:enum" /> | "Off" | "TrackAll" | "TrackMineOnly"'
  - name: contentControls
    uid: 'office!Word.Document#contentControls:member'
    package: office!
    fullName: contentControls
    summary: >-
      Gets the collection of content control objects in the document. This includes content controls in the body of the
      document, headers, footers, textboxes, etc.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly contentControls: Word.ContentControlCollection;'
      return:
        type: '<xref uid="office!Word.ContentControlCollection:class" />'
  - name: context
    uid: 'office!Word.Document#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Word.RequestContext:class" />'
  - name: customXmlParts
    uid: 'office!Word.Document#customXmlParts:member'
    package: office!
    fullName: customXmlParts
    summary: Gets the custom XML parts in the document.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly customXmlParts: Word.CustomXmlPartCollection;'
      return:
        type: '<xref uid="office!Word.CustomXmlPartCollection:class" />'
  - name: properties
    uid: 'office!Word.Document#properties:member'
    package: office!
    fullName: properties
    summary: Gets the properties of the document.
    remarks: >-
      \[ [API set: WordApi 1.3](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/30-properties/get-built-in-properties.yaml

      await Word.run(async (context) => {
          const builtInProperties = context.document.properties;
          builtInProperties.load("*"); // Let's get all!

          await context.sync();
          console.log(JSON.stringify(builtInProperties, null, 4));
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly properties: Word.DocumentProperties;'
      return:
        type: '<xref uid="office!Word.DocumentProperties:class" />'
  - name: saved
    uid: 'office!Word.Document#saved:member'
    package: office!
    fullName: saved
    summary: >-
      Indicates whether the changes in the document have been saved. A value of true indicates that the document hasn't
      changed since it was saved.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly saved: boolean;'
      return:
        type: boolean
  - name: sections
    uid: 'office!Word.Document#sections:member'
    package: office!
    fullName: sections
    summary: Gets the collection of section objects in the document.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly sections: Word.SectionCollection;'
      return:
        type: '<xref uid="office!Word.SectionCollection:class" />'
  - name: settings
    uid: 'office!Word.Document#settings:member'
    package: office!
    fullName: settings
    summary: Gets the add-in's settings in the document.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-settings.yaml

      // Get all custom settings this add-in set on this document.

      await Word.run(async (context) => {
        const settings = context.document.settings;
        settings.load("items");
        await context.sync();

        if (settings.items.length == 0) {
          console.log("There are no settings");
        } else {
          console.log("All settings:");
          for (let i = 0; i < settings.items.length; i++) {
            console.log(settings.items[i]);
          }
        }
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly settings: Word.SettingCollection;'
      return:
        type: '<xref uid="office!Word.SettingCollection:class" />'
methods:
  - name: 'addStyle(name, type)'
    uid: 'office!Word.Document#addStyle:member(1)'
    package: office!
    fullName: 'addStyle(name, type)'
    summary: Adds a style into the document by name and type.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'addStyle(name: string, type: Word.StyleType): Word.Style;'
      parameters:
        - id: name
          description: Required. A string representing the style name.
          type: string
        - id: type
          description: 'Required. The style type, including character, list, paragraph, or table.'
          type: '<xref uid="office!Word.StyleType:enum" />'
      return:
        type: '<xref uid="office!Word.Style:class" />'
        description: ''
  - name: 'addStyle(name, type)'
    uid: 'office!Word.Document#addStyle:member(2)'
    package: office!
    fullName: 'addStyle(name, type)'
    summary: Adds a style into the document by name and type.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'addStyle(name: string, type: "Character" | "List" | "Paragraph" | "Table"): Word.Style;'
      parameters:
        - id: name
          description: Required. A string representing the style name.
          type: string
        - id: type
          description: 'Required. The style type, including character, list, paragraph, or table.'
          type: '"Character" | "List" | "Paragraph" | "Table"'
      return:
        type: '<xref uid="office!Word.Style:class" />'
        description: ''
  - name: close(closeBehavior)
    uid: 'office!Word.Document#close:member(1)'
    package: office!
    fullName: close(closeBehavior)
    summary: Close current document.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'close(closeBehavior?: Word.CloseBehavior): void;'
      parameters:
        - id: closeBehavior
          description: Optional. The close behavior must be 'Save' or 'SkipSave'. Default value is 'Save'.
          type: '<xref uid="office!Word.CloseBehavior:enum" />'
      return:
        type: void
        description: ''
  - name: close(closeBehavior)
    uid: 'office!Word.Document#close:member(2)'
    package: office!
    fullName: close(closeBehavior)
    summary: Close current document.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'close(closeBehavior?: "Save" | "SkipSave"): void;'
      parameters:
        - id: closeBehavior
          description: Optional. The close behavior must be 'Save' or 'SkipSave'. Default value is 'Save'.
          type: '"Save" | "SkipSave"'
      return:
        type: void
        description: ''
  - name: deleteBookmark(name)
    uid: 'office!Word.Document#deleteBookmark:member(1)'
    package: office!
    fullName: deleteBookmark(name)
    summary: 'Deletes a bookmark, if it exists, from the document.'
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'deleteBookmark(name: string): void;'
      parameters:
        - id: name
          description: 'Required. The bookmark name, which is case-insensitive.'
          type: string
      return:
        type: void
        description: ''
  - name: getBookmarkRange(name)
    uid: 'office!Word.Document#getBookmarkRange:member(1)'
    package: office!
    fullName: getBookmarkRange(name)
    summary: Gets a bookmark's range. Throws an `ItemNotFound` error if the bookmark does not exist.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBookmarkRange(name: string): Word.Range;'
      parameters:
        - id: name
          description: 'Required. The bookmark name, which is case-insensitive.'
          type: string
      return:
        type: '<xref uid="office!Word.Range:class" />'
        description: ''
  - name: getBookmarkRangeOrNullObject(name)
    uid: 'office!Word.Document#getBookmarkRangeOrNullObject:member(1)'
    package: office!
    fullName: getBookmarkRangeOrNullObject(name)
    summary: >-
      Gets a bookmark's range. If the bookmark does not exist, then this method will return an object with its
      `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getBookmarkRangeOrNullObject(name: string): Word.Range;'
      parameters:
        - id: name
          description: 'Required. The bookmark name, which is case-insensitive.'
          type: string
      return:
        type: '<xref uid="office!Word.Range:class" />'
        description: ''
  - name: getContentControls(options)
    uid: 'office!Word.Document#getContentControls:member(1)'
    package: office!
    fullName: getContentControls(options)
    summary: >-
      Gets the currently supported content controls in the document. **Important**: If specific types are provided in
      the options parameter, only content controls of supported types are returned. Be aware that an exception will be
      thrown on using methods of a generic [Word.ContentControl](xref:office!Word.ContentControl:class) that aren't
      relevant for the specific type. With time, additional types of content controls may be supported. Therefore, your
      add-in should request and handle specific types of content controls.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getContentControls(options?: Word.ContentControlOptions): Word.ContentControlCollection;'
      parameters:
        - id: options
          description: Optional. Options that define which content controls are returned.
          type: '<xref uid="office!Word.ContentControlOptions:interface" />'
      return:
        type: '<xref uid="office!Word.ContentControlCollection:class" />'
        description: ''
  - name: getEndnoteBody()
    uid: 'office!Word.Document#getEndnoteBody:member(1)'
    package: office!
    fullName: getEndnoteBody()
    summary: Gets the document's endnotes in a single body. Not implemented in Word on the web.
    remarks: '\[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getEndnoteBody(): Word.Body;'
      return:
        type: '<xref uid="office!Word.Body:class" />'
        description: ''
  - name: getFootnoteBody()
    uid: 'office!Word.Document#getFootnoteBody:member(1)'
    package: office!
    fullName: getFootnoteBody()
    summary: Gets the document's footnotes in a single body. Not implemented in Word on the web.
    remarks: '\[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getFootnoteBody(): Word.Body;'
      return:
        type: '<xref uid="office!Word.Body:class" />'
        description: ''
  - name: getSelection()
    uid: 'office!Word.Document#getSelection:member(1)'
    package: office!
    fullName: getSelection()
    summary: Gets the current selection of the document. Multiple selections are not supported.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {
          
          const textSample = 'This is an example of the insert text method. This is a method ' + 
              'which allows users to insert text into a selection. It can insert text into a ' +
              'relative location or it can overwrite the current selection. Since the ' +
              'getSelection method returns a range object, look up the range object documentation ' +
              'for everything you can do with a selection.';
          
          // Create a range proxy object for the current selection.
          const range = context.document.getSelection();
          
          // Queue a command to insert text at the end of the selection.
          range.insertText(textSample, Word.InsertLocation.end);
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          await context.sync();
          console.log('Inserted the text at the end of the selection.');
      });  
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getSelection(): Word.Range;'
      return:
        type: '<xref uid="office!Word.Range:class" />'
        description: ''
  - name: getStyles()
    uid: 'office!Word.Document#getStyles:member(1)'
    package: office!
    fullName: getStyles()
    summary: Gets a StyleCollection object that represents the whole style set of the document.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getStyles(): Word.StyleCollection;'
      return:
        type: '<xref uid="office!Word.StyleCollection:class" />'
        description: ''
  - name: 'insertFileFromBase64(base64File, insertLocation, insertFileOptions)'
    uid: 'office!Word.Document#insertFileFromBase64:member(1)'
    package: office!
    fullName: 'insertFileFromBase64(base64File, insertLocation, insertFileOptions)'
    summary: >-
      Inserts a document into the target document at a specific location with additional properties. Headers, footers,
      watermarks, and other section properties are copied by default.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: >-
        insertFileFromBase64(base64File: string, insertLocation: Word.InsertLocation.replace | Word.InsertLocation.start
        | Word.InsertLocation.end | "Replace" | "Start" | "End", insertFileOptions?: Word.InsertFileOptions):
        Word.SectionCollection;
      parameters:
        - id: base64File
          description: Required. The Base64-encoded content of a .docx file.
          type: string
        - id: insertLocation
          description: 'Required. The value must be ''Replace'', ''Start'', or ''End''.'
          type: >-
            <xref uid="office!Word.InsertLocation.replace:member" /> | <xref
            uid="office!Word.InsertLocation.start:member" /> | <xref uid="office!Word.InsertLocation.end:member" /> |
            "Replace" | "Start" | "End"
        - id: insertFileOptions
          description: Optional. The additional properties that should be imported to the destination document.
          type: '<xref uid="office!Word.InsertFileOptions:interface" />'
      return:
        type: '<xref uid="office!Word.SectionCollection:class" />'
        description: ''
  - name: load(options)
    uid: 'office!Word.Document#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.DocumentLoadOptions): Word.Document;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Word.Interfaces.DocumentLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Word.Document:class" />'
        description: |-


          #### Examples

          ```typescript
          // Run a batch operation against the Word object model.
          await Word.run(async (context) => {
              
              // Create a proxy object for the document.
              const thisDocument = context.document;
              
              // Queue a command to load content control properties.
              thisDocument.load('contentControls/id, contentControls/text, contentControls/tag');
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              await context.sync();
              if (thisDocument.contentControls.items.length !== 0) {
                  for (let i = 0; i < thisDocument.contentControls.items.length; i++) {
                      console.log(thisDocument.contentControls.items[i].id);
                      console.log(thisDocument.contentControls.items[i].text);
                      console.log(thisDocument.contentControls.items[i].tag);
                  }
              } else {
                  console.log('No content controls in this document.');
              }
          });
          ```
  - name: load(propertyNames)
    uid: 'office!Word.Document#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Document;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Word.Document:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Word.Document#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Document;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Word.Document:class" />'
        description: ''
  - name: 'save(saveBehavior, fileName)'
    uid: 'office!Word.Document#save:member(1)'
    package: office!
    fullName: 'save(saveBehavior, fileName)'
    summary: Saves the document.
    remarks: |-
      \[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Run a batch operation against the Word object model.
      await Word.run(async (context) => {
          
          // Create a proxy object for the document.
          const thisDocument = context.document;

          // Queue a command to load the document save state (on the saved property).
          thisDocument.load('saved');    
          
          // Synchronize the document state by executing the queued commands, 
          // and return a promise to indicate task completion.
          await context.sync();
              
          if (thisDocument.saved === false) {
              // Queue a command to save this document.
              thisDocument.save();
              
              // Synchronize the document state by executing the queued commands, 
              // and return a promise to indicate task completion.
              await context.sync();
              console.log('Saved the document');
          } else {
              console.log('The document has not changed since the last save.');
          }
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'save(saveBehavior?: Word.SaveBehavior, fileName?: string): void;'
      parameters:
        - id: saveBehavior
          description: Optional. The save behavior must be 'Save' or 'Prompt'. Default value is 'Save'.
          type: '<xref uid="office!Word.SaveBehavior:enum" />'
        - id: fileName
          description: Optional. The file name (exclude file extension). Only takes effect for a new document.
          type: string
      return:
        type: void
        description: ''
  - name: 'save(saveBehavior, fileName)'
    uid: 'office!Word.Document#save:member(2)'
    package: office!
    fullName: 'save(saveBehavior, fileName)'
    summary: Saves the document.
    remarks: '\[ [API set: WordApi 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'save(saveBehavior?: "Save" | "Prompt", fileName?: string): void;'
      parameters:
        - id: saveBehavior
          description: Optional. The save behavior must be 'Save' or 'Prompt'. Default value is 'Save'.
          type: '"Save" | "Prompt"'
        - id: fileName
          description: Optional. The file name (exclude file extension). Only takes effect for a new document.
          type: string
      return:
        type: void
        description: ''
  - name: 'search(searchText, searchOptions)'
    uid: 'office!Word.Document#search:member(1)'
    package: office!
    fullName: 'search(searchText, searchOptions)'
    summary: >-
      Performs a search with the specified search options on the scope of the whole document. The search results are a
      collection of range objects.
    remarks: '\[ [API set: WordApiOnline 1.1](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        search(searchText: string, searchOptions?: Word.SearchOptions | {
                    ignorePunct?: boolean;
                    ignoreSpace?: boolean;
                    matchCase?: boolean;
                    matchPrefix?: boolean;
                    matchSuffix?: boolean;
                    matchWholeWord?: boolean;
                    matchWildcards?: boolean;
                }): Word.RangeCollection;
      parameters:
        - id: searchText
          description: ''
          type: string
        - id: searchOptions
          description: ''
          type: |-
            <xref uid="office!Word.SearchOptions:class" /> | {
                        ignorePunct?: boolean;
                        ignoreSpace?: boolean;
                        matchCase?: boolean;
                        matchPrefix?: boolean;
                        matchSuffix?: boolean;
                        matchWholeWord?: boolean;
                        matchWildcards?: boolean;
                    }
      return:
        type: '<xref uid="office!Word.RangeCollection:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Word.Document#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.DocumentUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Word.Interfaces.DocumentUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Word.Document#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Document): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Word.Document:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Word.Document#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.Document object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.DocumentData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.DocumentData;'
      return:
        type: '<xref uid="office!Word.Interfaces.DocumentData:interface" />'
        description: ''
  - name: track()
    uid: 'office!Word.Document#track:member(1)'
    package: office!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Document;'
      return:
        type: '<xref uid="office!Word.Document:class" />'
        description: ''
  - name: untrack()
    uid: 'office!Word.Document#untrack:member(1)'
    package: office!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Document;'
      return:
        type: '<xref uid="office!Word.Document:class" />'
        description: ''
events:
  - name: onContentControlAdded
    uid: 'office!Word.Document#onContentControlAdded:member'
    package: office!
    fullName: onContentControlAdded
    summary: >-
      Occurs when a content control is added. Run context.sync() in the handler to get the new content control's
      properties.
    remarks: '\[ [API set: WordApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'readonly onContentControlAdded: OfficeExtension.EventHandlers<Word.ContentControlAddedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="office!Word.ContentControlAddedEventArgs:interface" />&gt;
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
