### YamlMime:TSType
name: Word.Comment
uid: 'office!Word.Comment:class'
package: office!
fullName: Word.Comment
summary: Represents a comment in the document.
remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: authorEmail
    uid: 'office!Word.Comment#authorEmail:member'
    package: office!
    fullName: authorEmail
    summary: Gets the email of the comment's author.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly authorEmail: string;'
      return:
        type: string
  - name: authorName
    uid: 'office!Word.Comment#authorName:member'
    package: office!
    fullName: authorName
    summary: Gets the name of the comment's author.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly authorName: string;'
      return:
        type: string
  - name: content
    uid: 'office!Word.Comment#content:member'
    package: office!
    fullName: content
    summary: Gets or sets the comment's content as plain text.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Edit the first comment in the selected content.

      await Word.run(async (context) => {
        const text = $("#edit-comment-text")
          .val()
          .toString();
        const comment = context.document
          .getSelection()
          .getComments()
          .getFirst();
        comment.content = text;

        // Load object for display in Script Lab console.
        comment.load();
        await context.sync();

        console.log("Comment content changed:");
        console.log(comment);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'content: string;'
      return:
        type: string
  - name: contentRange
    uid: 'office!Word.Comment#contentRange:member'
    package: office!
    fullName: contentRange
    summary: Gets or sets the comment's content range.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contentRange: Word.CommentContentRange;'
      return:
        type: '<xref uid="office!Word.CommentContentRange:class" />'
  - name: context
    uid: 'office!Word.Comment#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Word.RequestContext:class" />'
  - name: creationDate
    uid: 'office!Word.Comment#creationDate:member'
    package: office!
    fullName: creationDate
    summary: Gets the creation date of the comment.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly creationDate: Date;'
      return:
        type: Date
  - name: id
    uid: 'office!Word.Comment#id:member'
    package: office!
    fullName: id
    summary: Gets the ID of the comment.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: replies
    uid: 'office!Word.Comment#replies:member'
    package: office!
    fullName: replies
    summary: Gets the collection of reply objects associated with the comment.
    remarks: '\[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly replies: Word.CommentReplyCollection;'
      return:
        type: '<xref uid="office!Word.CommentReplyCollection:class" />'
  - name: resolved
    uid: 'office!Word.Comment#resolved:member'
    package: office!
    fullName: resolved
    summary: >-
      Gets or sets the comment thread's status. Setting to true resolves the comment thread. Getting a value of true
      means that the comment thread is resolved.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Toggle Resolved status of the first comment in the selected content.

      await Word.run(async (context) => {
        const comment = context.document
          .getSelection()
          .getComments()
          .getFirst();
        comment.load("resolved");
        await context.sync();

        // Toggle resolved status.
        // If the comment is active, set as resolved.
        // If it's resolved, set resolved to false.
        const toggleResolved: boolean = comment.resolved;
        comment.resolved = !toggleResolved;
        comment.load();
        await context.sync();

        console.log(`Comment Resolved status: ${comment.resolved}`);
        console.log(comment);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'resolved: boolean;'
      return:
        type: boolean
methods:
  - name: delete()
    uid: 'office!Word.Comment#delete:member(1)'
    package: office!
    fullName: delete()
    summary: Deletes the comment and its replies.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Delete the first comment in the selected content.

      await Word.run(async (context) => {
        context.document
          .getSelection()
          .getComments()
          .getFirst()
          .delete();
        await context.sync();

        console.log("Comment deleted");
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getRange()
    uid: 'office!Word.Comment#getRange:member(1)'
    package: office!
    fullName: getRange()
    summary: Gets the range in the main document where the comment is on.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Get the range of the first comment in the selected content.

      await Word.run(async (context) => {
        const range = context.document
          .getSelection()
          .getComments()
          .getFirst()
          .getRange();
        range.load("text");
        await context.sync();

        console.log(`Comment location: ${range.text}`);
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Word.Range;'
      return:
        type: '<xref uid="office!Word.Range:class" />'
        description: ''
  - name: load(options)
    uid: 'office!Word.Comment#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Word.Interfaces.CommentLoadOptions): Word.Comment;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Word.Interfaces.CommentLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Word.Comment:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Word.Comment#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Word.Comment;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Word.Comment:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Word.Comment#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Word.Comment;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Word.Comment:class" />'
        description: ''
  - name: reply(replyText)
    uid: 'office!Word.Comment#reply:member(1)'
    package: office!
    fullName: reply(replyText)
    summary: Adds a new reply to the end of the comment thread.
    remarks: >-
      \[ [API set: WordApi 1.4](/javascript/api/requirement-sets/word/word-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/word/50-document/manage-comments.yaml

      // Reply to the first active comment in the selected content.

      await Word.run(async (context) => {
        const text = $("#reply-text")
          .val()
          .toString();
        const comments = context.document.getSelection().getComments();
        comments.load("items");
        await context.sync();
        const firstActiveComment = comments.items.find((item) => item.resolved !== true);
        if (firstActiveComment) {
          const reply = firstActiveComment.reply(text);
          console.log("Reply added");
        } else {
          console.log("No active comment was found in the selection so couldn't reply.");
        }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'reply(replyText: string): Word.CommentReply;'
      parameters:
        - id: replyText
          description: Required. Reply text.
          type: string
      return:
        type: '<xref uid="office!Word.CommentReply:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Word.Comment#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.CommentUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Word.Interfaces.CommentUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Word.Comment#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Word.Comment): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Word.Comment:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Word.Comment#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Word.Comment object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Word.Interfaces.CommentData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Word.Interfaces.CommentData;'
      return:
        type: '<xref uid="office!Word.Interfaces.CommentData:interface" />'
        description: ''
  - name: track()
    uid: 'office!Word.Comment#track:member(1)'
    package: office!
    fullName: track()
    summary: >-
      Track the object for automatic adjustment based on surrounding changes in the document. This call is a shorthand
      for
      [context.trackedObjects.add(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. If you are using this object across `.sync` calls and outside the sequential execution of a ".run" batch, and
      get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you need to add the
      object to the tracked object collection when the object was first created. If this object is part of a collection,
      you should also track the parent collection.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'track(): Word.Comment;'
      return:
        type: '<xref uid="office!Word.Comment:class" />'
        description: ''
  - name: untrack()
    uid: 'office!Word.Comment#untrack:member(1)'
    package: office!
    fullName: untrack()
    summary: >-
      Release the memory associated with this object, if it has previously been tracked. This call is shorthand for
      [context.trackedObjects.remove(thisObject)](https://docs.microsoft.com/javascript/api/office/officeextension.clientrequestcontext#office-officeextension-clientrequestcontext-trackedobjects-member)<!--
      -->. Having many tracked objects slows down the host application, so please remember to free any objects you add,
      once you're done using them. You will need to call `context.sync()` before the memory release takes effect.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'untrack(): Word.Comment;'
      return:
        type: '<xref uid="office!Word.Comment:class" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
