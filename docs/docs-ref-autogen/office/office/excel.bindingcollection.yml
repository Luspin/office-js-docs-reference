### YamlMime:TSType
name: Excel.BindingCollection
uid: 'office!Excel.BindingCollection:class'
package: office!
fullName: Excel.BindingCollection
summary: Represents the collection of all the binding objects that are part of the workbook.
remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'office!Excel.BindingCollection#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: count
    uid: 'office!Excel.BindingCollection#count:member'
    package: office!
    fullName: count
    summary: Returns the number of bindings in the collection.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly count: number;'
      return:
        type: number
  - name: items
    uid: 'office!Excel.BindingCollection#items:member'
    package: office!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: Excel.Binding[];'
      return:
        type: '<xref uid="office!Excel.Binding:class" />[]'
methods:
  - name: 'add(range, bindingType, id)'
    uid: 'office!Excel.BindingCollection#add:member(1)'
    package: office!
    fullName: 'add(range, bindingType, id)'
    summary: Add a new binding to a particular Range.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be a `Range` object or a string. If string, must contain the full address,
            including the sheet name
          type: '<xref uid="office!Excel.Range:class" /> | string'
        - id: bindingType
          description: Type of binding. See `Excel.BindingType`<!-- -->.
          type: '<xref uid="office!Excel.BindingType:enum" />'
        - id: id
          description: Name of the binding.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: 'add(range, bindingType, id)'
    uid: 'office!Excel.BindingCollection#add:member(2)'
    package: office!
    fullName: 'add(range, bindingType, id)'
    summary: Add a new binding to a particular Range.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(range: Range | string, bindingType: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      parameters:
        - id: range
          description: >-
            Range to bind the binding to. May be a `Range` object or a string. If string, must contain the full address,
            including the sheet name
          type: '<xref uid="office!Excel.Range:class" /> | string'
        - id: bindingType
          description: Type of binding. See `Excel.BindingType`<!-- -->.
          type: '"Range" | "Table" | "Text"'
        - id: id
          description: Name of the binding.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: 'addFromNamedItem(name, bindingType, id)'
    uid: 'office!Excel.BindingCollection#addFromNamedItem:member(1)'
    package: office!
    fullName: 'addFromNamedItem(name, bindingType, id)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item references to multiple areas, the
      `InvalidReference` error will be returned.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
      parameters:
        - id: name
          description: Name from which to create binding.
          type: string
        - id: bindingType
          description: Type of binding. See `Excel.BindingType`<!-- -->.
          type: '<xref uid="office!Excel.BindingType:enum" />'
        - id: id
          description: Name of the binding.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: 'addFromNamedItem(name, bindingType, id)'
    uid: 'office!Excel.BindingCollection#addFromNamedItem:member(2)'
    package: office!
    fullName: 'addFromNamedItem(name, bindingType, id)'
    summary: >-
      Add a new binding based on a named item in the workbook. If the named item references to multiple areas, the
      `InvalidReference` error will be returned.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addFromNamedItem(name: string, bindingType: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      parameters:
        - id: name
          description: Name from which to create binding.
          type: string
        - id: bindingType
          description: Type of binding. See `Excel.BindingType`<!-- -->.
          type: '"Range" | "Table" | "Text"'
        - id: id
          description: Name of the binding.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: 'addFromSelection(bindingType, id)'
    uid: 'office!Excel.BindingCollection#addFromSelection:member(1)'
    package: office!
    fullName: 'addFromSelection(bindingType, id)'
    summary: >-
      Add a new binding based on the current selection. If the selection has multiple areas, the `InvalidReference`
      error will be returned.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
      parameters:
        - id: bindingType
          description: Type of binding. See `Excel.BindingType`<!-- -->.
          type: '<xref uid="office!Excel.BindingType:enum" />'
        - id: id
          description: Name of the binding.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: 'addFromSelection(bindingType, id)'
    uid: 'office!Excel.BindingCollection#addFromSelection:member(2)'
    package: office!
    fullName: 'addFromSelection(bindingType, id)'
    summary: >-
      Add a new binding based on the current selection. If the selection has multiple areas, the `InvalidReference`
      error will be returned.
    remarks: '\[ [API set: ExcelApi 1.3](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'addFromSelection(bindingType: "Range" | "Table" | "Text", id: string): Excel.Binding;'
      parameters:
        - id: bindingType
          description: Type of binding. See `Excel.BindingType`<!-- -->.
          type: '"Range" | "Table" | "Text"'
        - id: id
          description: Name of the binding.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: getCount()
    uid: 'office!Excel.BindingCollection#getCount:member(1)'
    package: office!
    fullName: getCount()
    summary: Gets the number of bindings in the collection.
    remarks: '\[ [API set: ExcelApi 1.4](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: ''
  - name: getItem(id)
    uid: 'office!Excel.BindingCollection#getItem:member(1)'
    package: office!
    fullName: getItem(id)
    summary: Gets a binding object by ID.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      async function onBindingDataChanged(eventArgs) {
          await Excel.run(async (context) => { 
              // Highlight the table related to the binding in orange to indicate data has been changed.
              context.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = "Orange";
              await context.sync();
              
              console.log("The value in this table got changed!");
          });
      }
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(id: string): Excel.Binding;'
      parameters:
        - id: id
          description: ID of the binding object to be retrieved.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: getItemAt(index)
    uid: 'office!Excel.BindingCollection#getItemAt:member(1)'
    package: office!
    fullName: getItemAt(index)
    summary: Gets a binding object based on its position in the items array.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      await Excel.run(async (context) => { 
          const lastPosition = context.workbook.bindings.count - 1;
          const binding = context.workbook.bindings.getItemAt(lastPosition);
          binding.load('type')
          await context.sync();

          console.log(binding.type);
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): Excel.Binding;'
      parameters:
        - id: index
          description: Index value of the object to be retrieved. Zero-indexed.
          type: number
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: getItemOrNullObject(id)
    uid: 'office!Excel.BindingCollection#getItemOrNullObject:member(1)'
    package: office!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a binding object by ID. If the binding object does not exist, then this method returns an object with its
      `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi 1.4](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.Binding;'
      parameters:
        - id: id
          description: ID of the binding object to be retrieved.
          type: string
      return:
        type: '<xref uid="office!Excel.Binding:class" />'
        description: ''
  - name: load(options)
    uid: 'office!Excel.BindingCollection#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions):
        Excel.BindingCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="office!Excel.Interfaces.BindingCollectionLoadOptions:interface" /> & <xref
            uid="office!Excel.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="office!Excel.BindingCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.BindingCollection#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.BindingCollection:class" />'
        description: |-


          #### Examples

          ```typescript
          await Excel.run(async (context) => { 
              const bindings = context.workbook.bindings;
              bindings.load('items');
              await context.sync();

              for (let i = 0; i < bindings.items.length; i++) {
                  console.log(bindings.items[i].id);
              }
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.BindingCollection#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.BindingCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="office!Excel.BindingCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'office!Excel.BindingCollection#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `Excel.BindingCollection` object is an API object, the `toJSON` method returns
      a plain JavaScript object (typed as `Excel.Interfaces.BindingCollectionData`<!-- -->) that contains an "items"
      array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.BindingCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
