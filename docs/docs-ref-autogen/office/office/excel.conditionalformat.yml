### YamlMime:TSType
name: Excel.ConditionalFormat
uid: 'office!Excel.ConditionalFormat:class'
package: office!
fullName: Excel.ConditionalFormat
summary: >-
  An object encapsulating a conditional format's range, format, rule, and other properties. To learn more about the
  conditional formatting object model, read [Apply conditional formatting to Excel
  ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!-- -->.
remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
isPreview: false
isDeprecated: false
type: class
properties:
  - name: cellValue
    uid: 'office!Excel.ConditionalFormat#cellValue:member'
    package: office!
    fullName: cellValue
    summary: Returns the cell value conditional format properties if the current conditional format is a `CellValue` type.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B21:E23");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.cellValue);
          conditionalFormat.cellValue.format.font.color = "red";
          conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.CellValueConditionalFormat:class" />'
  - name: cellValueOrNullObject
    uid: 'office!Excel.ConditionalFormat#cellValueOrNullObject:member'
    package: office!
    fullName: cellValueOrNullObject
    summary: Returns the cell value conditional format properties if the current conditional format is a `CellValue` type.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.CellValueConditionalFormat:class" />'
  - name: colorScale
    uid: 'office!Excel.ConditionalFormat#colorScale:member'
    package: office!
    fullName: colorScale
    summary: Returns the color scale conditional format properties if the current conditional format is a `ColorScale` type.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B2:M5");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.colorScale);
          const criteria = {
              minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
              midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
              maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
          };
          conditionalFormat.colorScale.criteria = criteria;

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.ColorScaleConditionalFormat:class" />'
  - name: colorScaleOrNullObject
    uid: 'office!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    package: office!
    fullName: colorScaleOrNullObject
    summary: Returns the color scale conditional format properties if the current conditional format is a `ColorScale` type.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.ColorScaleConditionalFormat:class" />'
  - name: context
    uid: 'office!Excel.ConditionalFormat#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: custom
    uid: 'office!Excel.ConditionalFormat#custom:member'
    package: office!
    fullName: custom
    summary: Returns the custom conditional format properties if the current conditional format is a custom type.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
          conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
          conditionalFormat.custom.format.font.color = "green";

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.CustomConditionalFormat:class" />'
  - name: customOrNullObject
    uid: 'office!Excel.ConditionalFormat#customOrNullObject:member'
    package: office!
    fullName: customOrNullObject
    summary: Returns the custom conditional format properties if the current conditional format is a custom type.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.CustomConditionalFormat:class" />'
  - name: dataBar
    uid: 'office!Excel.ConditionalFormat#dataBar:member'
    package: office!
    fullName: dataBar
    summary: Returns the data bar properties if the current conditional format is a data bar.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.dataBar);
          conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.DataBarConditionalFormat:class" />'
  - name: dataBarOrNullObject
    uid: 'office!Excel.ConditionalFormat#dataBarOrNullObject:member'
    package: office!
    fullName: dataBarOrNullObject
    summary: Returns the data bar properties if the current conditional format is a data bar.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.DataBarConditionalFormat:class" />'
  - name: iconSet
    uid: 'office!Excel.ConditionalFormat#iconSet:member'
    package: office!
    fullName: iconSet
    summary: Returns the icon set conditional format properties if the current conditional format is an `IconSet` type.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.iconSet);
          const iconSetCF = conditionalFormat.iconSet;
          iconSetCF.style = Excel.IconSet.threeTriangles;

          /*
              The iconSetCF.criteria array is automatically prepopulated with
              criterion elements whose properties have been given default settings.
              You can't write to each property of a criterion directly. Instead,
              replace the whole criteria object.

              With a "three*" icon set style, such as "threeTriangles", the third
              element in the criteria array (criteria[2]) defines the "top" icon;
              e.g., a green triangle. The second (criteria[1]) defines the "middle"
              icon. The first (criteria[0]) defines the "low" icon, but it
              can often be left empty as the following object shows, because every
              cell that does not match the other two criteria always gets the low
              icon.            
          */
          iconSetCF.criteria = [
              {} as any,
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=700"
              },
              {
                  type: Excel.ConditionalFormatIconRuleType.number,
                  operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                  formula: "=1000",
              }
          ];

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.IconSetConditionalFormat:class" />'
  - name: iconSetOrNullObject
    uid: 'office!Excel.ConditionalFormat#iconSetOrNullObject:member'
    package: office!
    fullName: iconSetOrNullObject
    summary: Returns the icon set conditional format properties if the current conditional format is an `IconSet` type.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.IconSetConditionalFormat:class" />'
  - name: id
    uid: 'office!Excel.ConditionalFormat#id:member'
    package: office!
    fullName: id
    summary: The priority of the conditional format in the current `ConditionalFormatCollection`<!-- -->.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: preset
    uid: 'office!Excel.ConditionalFormat#preset:member'
    package: office!
    fullName: preset
    summary: Returns the preset criteria conditional format. See `Excel.PresetCriteriaConditionalFormat` for more details.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B2:M5");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.presetCriteria);
          conditionalFormat.preset.format.font.color = "white";
          conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.PresetCriteriaConditionalFormat:class" />'
  - name: presetOrNullObject
    uid: 'office!Excel.ConditionalFormat#presetOrNullObject:member'
    package: office!
    fullName: presetOrNullObject
    summary: Returns the preset criteria conditional format. See `Excel.PresetCriteriaConditionalFormat` for more details.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.PresetCriteriaConditionalFormat:class" />'
  - name: priority
    uid: 'office!Excel.ConditionalFormat#priority:member'
    package: office!
    fullName: priority
    summary: >-
      The priority (or index) within the conditional format collection that this conditional format currently exists in.
      Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order. Use a
      negative priority to begin from the back. Priorities greater than the bounds will get and set to the maximum (or
      minimum if negative) priority. Also note that if you change the priority, you have to re-fetch a new copy of the
      object at that new priority location if you want to make further changes to it.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'priority: number;'
      return:
        type: number
  - name: stopIfTrue
    uid: 'office!Excel.ConditionalFormat#stopIfTrue:member'
    package: office!
    fullName: stopIfTrue
    summary: >-
      If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.
      Value is `null` on data bars, icon sets, and color scales as there's no concept of `StopIfTrue` for these.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type: boolean
  - name: textComparison
    uid: 'office!Excel.ConditionalFormat#textComparison:member'
    package: office!
    fullName: textComparison
    summary: >-
      Returns the specific text conditional format properties if the current conditional format is a text type. For
      example, to format cells matching the word "Text".
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B16:D18");
          const conditionalFormat = range.conditionalFormats
              .add(Excel.ConditionalFormatType.containsText);
          conditionalFormat.textComparison.format.font.color = "red";
          conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

          await context.sync();
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.TextConditionalFormat:class" />'
  - name: textComparisonOrNullObject
    uid: 'office!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    package: office!
    fullName: textComparisonOrNullObject
    summary: >-
      Returns the specific text conditional format properties if the current conditional format is a text type. For
      example, to format cells matching the word "Text".
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.TextConditionalFormat:class" />'
  - name: topBottom
    uid: 'office!Excel.ConditionalFormat#topBottom:member'
    package: office!
    fullName: topBottom
    summary: >-
      Returns the top/bottom conditional format properties if the current conditional format is a `TopBottom` type. For
      example, to format the top 10% or bottom 10 items.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.TopBottomConditionalFormat:class" />'
  - name: topBottomOrNullObject
    uid: 'office!Excel.ConditionalFormat#topBottomOrNullObject:member'
    package: office!
    fullName: topBottomOrNullObject
    summary: >-
      Returns the top/bottom conditional format properties if the current conditional format is a `TopBottom` type. For
      example, to format the top 10% or bottom 10 items.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type: '<xref uid="office!Excel.TopBottomConditionalFormat:class" />'
  - name: type
    uid: 'office!Excel.ConditionalFormat#type:member'
    package: office!
    fullName: type
    summary: A type of conditional format. Only one can be set at a time.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const worksheetRange = sheet.getRange();
          worksheetRange.conditionalFormats.load("type");

          await context.sync();

          let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
          worksheetRange.conditionalFormats.items.forEach(item => {
              cfRangePairs.push({
                  cf: item,
                  range: item.getRange().load("address")
              });
          });

          await context.sync();

          if (cfRangePairs.length > 0) {
              cfRangePairs.forEach(item => {
                  console.log(item.cf.type);
              });
          } else {
              console.log("No conditional formats applied.");
          }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" |
        "PresetCriteria" | "ContainsText" | "CellValue";
      return:
        type: >-
          <xref uid="office!Excel.ConditionalFormatType:enum" /> | "Custom" | "DataBar" | "ColorScale" | "IconSet" |
          "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
methods:
  - name: changeRuleToCellValue(properties)
    uid: 'office!Excel.ConditionalFormat#changeRuleToCellValue:member(1)'
    package: office!
    fullName: changeRuleToCellValue(properties)
    summary: Change the conditional format rule type to cell value.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToCellValue(properties: Excel.ConditionalCellValueRule): void;'
      parameters:
        - id: properties
          description: The properties to set for the cell value conditional format rule.
          type: '<xref uid="office!Excel.ConditionalCellValueRule:interface" />'
      return:
        type: void
        description: ''
  - name: changeRuleToColorScale()
    uid: 'office!Excel.ConditionalFormat#changeRuleToColorScale:member(1)'
    package: office!
    fullName: changeRuleToColorScale()
    summary: Change the conditional format rule type to color scale.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToColorScale(): void;'
      return:
        type: void
        description: ''
  - name: changeRuleToContainsText(properties)
    uid: 'office!Excel.ConditionalFormat#changeRuleToContainsText:member(1)'
    package: office!
    fullName: changeRuleToContainsText(properties)
    summary: Change the conditional format rule type to text comparison.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToContainsText(properties: Excel.ConditionalTextComparisonRule): void;'
      parameters:
        - id: properties
          description: The properties to set for the text comparison conditional format rule.
          type: '<xref uid="office!Excel.ConditionalTextComparisonRule:interface" />'
      return:
        type: void
        description: ''
  - name: changeRuleToCustom(formula)
    uid: 'office!Excel.ConditionalFormat#changeRuleToCustom:member(1)'
    package: office!
    fullName: changeRuleToCustom(formula)
    summary: Change the conditional format rule type to custom.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToCustom(formula: string): void;'
      parameters:
        - id: formula
          description: The formula to set for the custom conditional format rule.
          type: string
      return:
        type: void
        description: ''
  - name: changeRuleToDataBar()
    uid: 'office!Excel.ConditionalFormat#changeRuleToDataBar:member(1)'
    package: office!
    fullName: changeRuleToDataBar()
    summary: Change the conditional format rule type to data bar.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToDataBar(): void;'
      return:
        type: void
        description: ''
  - name: changeRuleToIconSet()
    uid: 'office!Excel.ConditionalFormat#changeRuleToIconSet:member(1)'
    package: office!
    fullName: changeRuleToIconSet()
    summary: Change the conditional format rule type to icon set.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToIconSet(): void;'
      return:
        type: void
        description: ''
  - name: changeRuleToPresetCriteria(properties)
    uid: 'office!Excel.ConditionalFormat#changeRuleToPresetCriteria:member(1)'
    package: office!
    fullName: changeRuleToPresetCriteria(properties)
    summary: Change the conditional format rule type to preset criteria.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToPresetCriteria(properties: Excel.ConditionalPresetCriteriaRule): void;'
      parameters:
        - id: properties
          description: The properties to set for the preset criteria conditional format rule.
          type: '<xref uid="office!Excel.ConditionalPresetCriteriaRule:interface" />'
      return:
        type: void
        description: ''
  - name: changeRuleToTopBottom(properties)
    uid: 'office!Excel.ConditionalFormat#changeRuleToTopBottom:member(1)'
    package: office!
    fullName: changeRuleToTopBottom(properties)
    summary: Change the conditional format rule type to top/bottom.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'changeRuleToTopBottom(properties: Excel.ConditionalTopBottomRule): void;'
      parameters:
        - id: properties
          description: The properties to set for the top/bottom conditional format rule.
          type: '<xref uid="office!Excel.ConditionalTopBottomRule:interface" />'
      return:
        type: void
        description: ''
  - name: delete()
    uid: 'office!Excel.ConditionalFormat#delete:member(1)'
    package: office!
    fullName: delete()
    summary: Deletes this conditional format.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getRange()
    uid: 'office!Excel.ConditionalFormat#getRange:member(1)'
    package: office!
    fullName: getRange()
    summary: >-
      Returns the range the conditonal format is applied to. Throws an error if the conditional format is applied to
      multiple ranges.
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const worksheetRange = sheet.getRange();
          worksheetRange.conditionalFormats.load("type");

          await context.sync();

          let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
          worksheetRange.conditionalFormats.items.forEach(item => {
              cfRangePairs.push({
                  cf: item,
                  range: item.getRange().load("address")
              });
          });

          await context.sync();

          if (cfRangePairs.length > 0) {
              cfRangePairs.forEach(item => {
                  console.log(item.cf.type);
              });
          } else {
              console.log("No conditional formats applied.");
          }
      });

      ```
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type: '<xref uid="office!Excel.Range:class" />'
        description: ''
  - name: getRangeOrNullObject()
    uid: 'office!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    package: office!
    fullName: getRangeOrNullObject()
    summary: >-
      Returns the range to which the conditonal format is applied. If the conditional format is applied to multiple
      ranges, then this method returns an object with its `isNullObject` property set to `true`<!-- -->. For further
      information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type: '<xref uid="office!Excel.Range:class" />'
        description: ''
  - name: getRanges()
    uid: 'office!Excel.ConditionalFormat#getRanges:member(1)'
    package: office!
    fullName: getRanges()
    summary: >-
      Returns the `RangeAreas`<!-- -->, comprising one or more rectangular ranges, to which the conditonal format is
      applied.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getRanges(): Excel.RangeAreas;'
      return:
        type: '<xref uid="office!Excel.RangeAreas:class" />'
        description: ''
  - name: load(options)
    uid: 'office!Excel.ConditionalFormat#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Excel.Interfaces.ConditionalFormatLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Excel.ConditionalFormat:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.ConditionalFormat#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.ConditionalFormat:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.ConditionalFormat#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.ConditionalFormat;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Excel.ConditionalFormat:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Excel.ConditionalFormat#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Excel.Interfaces.ConditionalFormatUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Excel.ConditionalFormat#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Excel.ConditionalFormat:class" />'
      return:
        type: void
        description: ''
  - name: setRanges(ranges)
    uid: 'office!Excel.ConditionalFormat#setRanges:member(1)'
    package: office!
    fullName: setRanges(ranges)
    summary: Set the ranges that the conditonal format rule is applied to.
    remarks: '\[ [API set: ExcelApi 1.17](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setRanges(ranges: Range | RangeAreas | string): void;'
      parameters:
        - id: ranges
          description: Collection of one or more ranges for this rule to be applied to.
          type: '<xref uid="office!Excel.Range:class" /> | <xref uid="office!Excel.RangeAreas:class" /> | string'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Excel.ConditionalFormat#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a
      plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`<!-- -->) that contains shallow copies
      of any loaded child properties from the original object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.ConditionalFormatData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
