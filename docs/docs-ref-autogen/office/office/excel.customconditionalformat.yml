### YamlMime:TSType
name: Excel.CustomConditionalFormat
uid: 'office!Excel.CustomConditionalFormat:class'
package: office!
fullName: Excel.CustomConditionalFormat
summary: Represents a custom conditional format type.
remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'office!Excel.CustomConditionalFormat#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: format
    uid: 'office!Excel.CustomConditionalFormat#format:member'
    package: office!
    fullName: format
    summary: 'Returns a format object, encapsulating the conditional formats font, fill, borders, and other properties.'
    remarks: >-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/14-conditional-formatting/conditional-formatting-basic.yaml

      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");
          const range = sheet.getRange("B8:E13");
          const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
          conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
          conditionalFormat.custom.format.font.color = "green";

          await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: Excel.ConditionalRangeFormat;'
      return:
        type: '<xref uid="office!Excel.ConditionalRangeFormat:class" />'
  - name: rule
    uid: 'office!Excel.CustomConditionalFormat#rule:member'
    package: office!
    fullName: rule
    summary: Specifies the `Rule` object on this conditional format.
    remarks: |-
      \[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getActiveWorksheet();
          const range = sheet.getRange("A1:A5");
          range.values = [[1], [20], [""], [5], ["test"]];
          const cf = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
          const cfCustom = cf.customOrNullObject;
          cfCustom.rule.formula = "=ISBLANK(A1)";
          cfCustom.format.fill.color = "#00FF00";
          await context.sync()

          console.log("Added new custom conditional format highlighting all blank cells.");
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly rule: Excel.ConditionalFormatRule;'
      return:
        type: '<xref uid="office!Excel.ConditionalFormatRule:class" />'
methods:
  - name: load(options)
    uid: 'office!Excel.CustomConditionalFormat#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.CustomConditionalFormatLoadOptions): Excel.CustomConditionalFormat;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Excel.Interfaces.CustomConditionalFormatLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Excel.CustomConditionalFormat:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.CustomConditionalFormat#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomConditionalFormat;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.CustomConditionalFormat:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.CustomConditionalFormat#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.CustomConditionalFormat;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Excel.CustomConditionalFormat:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Excel.CustomConditionalFormat#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.CustomConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Excel.Interfaces.CustomConditionalFormatUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Excel.CustomConditionalFormat#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.CustomConditionalFormat): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Excel.CustomConditionalFormat:class" />'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Excel.CustomConditionalFormat#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.CustomConditionalFormat object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `Excel.Interfaces.CustomConditionalFormatData`<!-- -->) that contains
      shallow copies of any loaded child properties from the original object.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomConditionalFormatData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.CustomConditionalFormatData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
