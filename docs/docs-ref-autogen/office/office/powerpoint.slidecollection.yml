### YamlMime:TSType
name: PowerPoint.SlideCollection
uid: 'office!PowerPoint.SlideCollection:class'
package: office!
fullName: PowerPoint.SlideCollection
summary: Represents the collection of slides in the presentation.
remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: context
    uid: 'office!PowerPoint.SlideCollection#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!PowerPoint.RequestContext:class" />'
  - name: items
    uid: 'office!PowerPoint.SlideCollection#items:member'
    package: office!
    fullName: items
    summary: Gets the loaded child items in this collection.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly items: PowerPoint.Slide[];'
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />[]'
methods:
  - name: add(options)
    uid: 'office!PowerPoint.SlideCollection#add:member(1)'
    package: office!
    fullName: add(options)
    summary: Adds a new slide at the end of the collection.
    remarks: >-
      \[ [API set: PowerPointApi 1.3](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/add-slides.yaml

      const chosenMaster = $("#master-id").val() as string;

      const chosenLayout = $("#layout-id").val() as string;


      await PowerPoint.run(async function(context) {
        context.presentation.slides.add({
          slideMasterId: chosenMaster,
          layoutId: chosenLayout
        });
        await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'add(options?: PowerPoint.AddSlideOptions): void;'
      parameters:
        - id: options
          description: The options that define the theme of the new slide.
          type: '<xref uid="office!PowerPoint.AddSlideOptions:interface" />'
      return:
        type: void
        description: ''
  - name: getCount()
    uid: 'office!PowerPoint.SlideCollection#getCount:member(1)'
    package: office!
    fullName: getCount()
    summary: Gets the number of slides in the collection.
    remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;'
        description: The number of slides in the collection.
  - name: getItem(key)
    uid: 'office!PowerPoint.SlideCollection#getItem:member(1)'
    package: office!
    fullName: getItem(key)
    summary: Gets a slide using its unique ID.
    remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItem(key: string): PowerPoint.Slide;'
      parameters:
        - id: key
          description: The ID of the slide.
          type: string
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />'
        description: 'The slide with the unique ID. If such a slide does not exist, an error is thrown.'
  - name: getItemAt(index)
    uid: 'office!PowerPoint.SlideCollection#getItemAt:member(1)'
    package: office!
    fullName: getItemAt(index)
    summary: >-
      Gets a slide using its zero-based index in the collection. Slides are stored in the same order as they are shown
      in the presentation.
    remarks: >-
      \[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/powerpoint/slide-management/get-set-slides.yaml

      // Selects slides 2, 4, and 5.

      await PowerPoint.run(async (context) => {
        context.presentation.load("slides");
        await context.sync();
        const slide2 = context.presentation.slides.getItemAt(1);
        const slide4 = context.presentation.slides.getItemAt(3);
        const slide5 = context.presentation.slides.getItemAt(4);
        slide2.load("id");
        slide4.load("id");
        slide5.load("id");
        try {
          await context.sync();
        } catch (error) {
          console.warn("This action requires at least 5 slides in the presentation.");
          return;
        }
        await context.sync();
        context.presentation.setSelectedSlides([slide2.id, slide4.id, slide5.id]);
        await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemAt(index: number): PowerPoint.Slide;'
      parameters:
        - id: index
          description: The index of the slide in the collection.
          type: number
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />'
        description: The slide at the given index. An error is thrown if index is out of range.
  - name: getItemOrNullObject(id)
    uid: 'office!PowerPoint.SlideCollection#getItemOrNullObject:member(1)'
    package: office!
    fullName: getItemOrNullObject(id)
    summary: >-
      Gets a slide using its unique ID. If such a slide does not exist, an object with an `isNullObject` property set to
      true is returned. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: PowerPointApi 1.2](/javascript/api/requirement-sets/powerpoint/powerpoint-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getItemOrNullObject(id: string): PowerPoint.Slide;'
      parameters:
        - id: id
          description: The ID of the slide.
          type: string
      return:
        type: '<xref uid="office!PowerPoint.Slide:class" />'
        description: The slide with the unique ID.
  - name: load(options)
    uid: 'office!PowerPoint.SlideCollection#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        load(options?: PowerPoint.Interfaces.SlideCollectionLoadOptions & PowerPoint.Interfaces.CollectionLoadOptions):
        PowerPoint.SlideCollection;
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: >-
            <xref uid="office!PowerPoint.Interfaces.SlideCollectionLoadOptions:interface" /> & <xref
            uid="office!PowerPoint.Interfaces.CollectionLoadOptions:interface" />
      return:
        type: '<xref uid="office!PowerPoint.SlideCollection:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!PowerPoint.SlideCollection#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): PowerPoint.SlideCollection;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!PowerPoint.SlideCollection:class" />'
        description: ''
  - name: load(propertyNamesAndPaths)
    uid: 'office!PowerPoint.SlideCollection#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): PowerPoint.SlideCollection;'
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: '<xref uid="office!OfficeExtension.LoadOption:interface" />'
      return:
        type: '<xref uid="office!PowerPoint.SlideCollection:class" />'
        description: ''
  - name: toJSON()
    uid: 'office!PowerPoint.SlideCollection#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original `PowerPoint.SlideCollection` object is an API object, the `toJSON` method
      returns a plain JavaScript object (typed as `PowerPoint.Interfaces.SlideCollectionData`<!-- -->) that contains an
      "items" array with shallow copies of any loaded properties from the collection's items.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): PowerPoint.Interfaces.SlideCollectionData;'
      return:
        type: '<xref uid="office!PowerPoint.Interfaces.SlideCollectionData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
