### YamlMime:TSType
name: Excel.Application
uid: 'office!Excel.Application:class'
package: office!
fullName: Excel.Application
summary: Represents the Excel application that manages the workbook.
remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: calculationEngineVersion
    uid: 'office!Excel.Application#calculationEngineVersion:member'
    package: office!
    fullName: calculationEngineVersion
    summary: Returns the Excel calculation engine version used for the last full recalculation.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly calculationEngineVersion: number;'
      return:
        type: number
  - name: calculationMode
    uid: 'office!Excel.Application#calculationMode:member'
    package: office!
    fullName: calculationMode
    summary: >-
      Returns the calculation mode used in the workbook, as defined by the constants in `Excel.CalculationMode`<!-- -->.
      Possible values are: `Automatic`<!-- -->, where Excel controls recalculation; `AutomaticExceptTables`<!-- -->,
      where Excel controls recalculation but ignores changes in tables; `Manual`<!-- -->, where calculation is done when
      the user requests it.
    remarks: >-
      \[ [API set: ExcelApi 1.1 for get, 1.8 for set](/javascript/api/requirement-sets/excel/excel-api-requirement-sets)
      \]
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculationMode: Excel.CalculationMode | "Automatic" | "AutomaticExceptTables" | "Manual";'
      return:
        type: '<xref uid="office!Excel.CalculationMode:enum" /> | "Automatic" | "AutomaticExceptTables" | "Manual"'
  - name: calculationState
    uid: 'office!Excel.Application#calculationState:member'
    package: office!
    fullName: calculationState
    summary: Returns the calculation state of the application. See `Excel.CalculationState` for details.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly calculationState: Excel.CalculationState | "Done" | "Calculating" | "Pending";'
      return:
        type: '<xref uid="office!Excel.CalculationState:enum" /> | "Done" | "Calculating" | "Pending"'
  - name: context
    uid: 'office!Excel.Application#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: cultureInfo
    uid: 'office!Excel.Application#cultureInfo:member'
    package: office!
    fullName: cultureInfo
    summary: >-
      Provides information based on current system culture settings. This includes the culture names, number formatting,
      and other culturally dependent settings.
    remarks: '\[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly cultureInfo: Excel.CultureInfo;'
      return:
        type: '<xref uid="office!Excel.CultureInfo:class" />'
  - name: decimalSeparator
    uid: 'office!Excel.Application#decimalSeparator:member'
    package: office!
    fullName: decimalSeparator
    summary: Gets the string used as the decimal separator for numeric values. This is based on the local Excel settings.
    remarks: >-
      \[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/50-workbook/culture-info.yaml

      await Excel.run(async (context) => {
        context.application.load("decimalSeparator,thousandsSeparator");
        context.application.cultureInfo.numberFormat.load("numberDecimalSeparator,numberGroupSeparator");
        await context.sync();

        // Local settings are set under the "Options > Advanced" menu.
        const localDecimalSeparator = context.application.decimalSeparator;
        const localThousandsSeparator = context.application.thousandsSeparator;

        const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;
        const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;

        console.log("Local character settings: ");
        console.log(`  Local decimal separator: ${localDecimalSeparator}`);
        console.log(`  Local thousands separator: ${localThousandsSeparator}`);

        console.log("System culture settings: ");
        console.log(`  System decimal separator: ${systemDecimalSeparator}`);
        console.log(`  System thousands separator: ${systemThousandsSeparator}`);
        console.log(`  `);

        await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly decimalSeparator: string;'
      return:
        type: string
  - name: formatStaleValues
    uid: 'office!Excel.Application#formatStaleValues:member'
    package: office!
    fullName: formatStaleValues
    summary: >-
      Specifies whether the Format Stale Values option within Calculation Options is enabled or disabled. The stale
      formulas are rendered with stale formatting if the option is enabled.
    remarks: '\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'formatStaleValues: boolean;'
      return:
        type: boolean
  - name: iterativeCalculation
    uid: 'office!Excel.Application#iterativeCalculation:member'
    package: office!
    fullName: iterativeCalculation
    summary: >-
      Returns the iterative calculation settings. In Excel on Windows and Mac, the settings will apply to the Excel
      Application. In Excel on the web and other platforms, the settings will apply to the active workbook.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly iterativeCalculation: Excel.IterativeCalculation;'
      return:
        type: '<xref uid="office!Excel.IterativeCalculation:class" />'
  - name: thousandsSeparator
    uid: 'office!Excel.Application#thousandsSeparator:member'
    package: office!
    fullName: thousandsSeparator
    summary: >-
      Gets the string used to separate groups of digits to the left of the decimal for numeric values. This is based on
      the local Excel settings.
    remarks: '\[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly thousandsSeparator: string;'
      return:
        type: string
  - name: useSystemSeparators
    uid: 'office!Excel.Application#useSystemSeparators:member'
    package: office!
    fullName: useSystemSeparators
    summary: >-
      Specifies if the system separators of Excel are enabled. System separators include the decimal separator and
      thousands separator.
    remarks: '\[ [API set: ExcelApi 1.11](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly useSystemSeparators: boolean;'
      return:
        type: boolean
methods:
  - name: calculate(calculationType)
    uid: 'office!Excel.Application#calculate:member(1)'
    package: office!
    fullName: calculate(calculationType)
    summary: Recalculate all currently opened workbooks in Excel.
    remarks: >-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/performance-optimization.yaml

      await Excel.run(async (context) => {
        context.application.calculate(Excel.CalculationType.full);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(calculationType: Excel.CalculationType): void;'
      parameters:
        - id: calculationType
          description: Specifies the calculation type to use. See `Excel.CalculationType` for details.
          type: '<xref uid="office!Excel.CalculationType:enum" />'
      return:
        type: void
        description: ''
  - name: calculate(calculationType)
    uid: 'office!Excel.Application#calculate:member(2)'
    package: office!
    fullName: calculate(calculationType)
    summary: Recalculate all currently opened workbooks in Excel.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      await Excel.run(async (context) => {
          context.workbook.application.calculate('Full');
          await context.sync();
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'calculate(calculationType: "Recalculate" | "Full" | "FullRebuild"): void;'
      parameters:
        - id: calculationType
          description: Specifies the calculation type to use. See `Excel.CalculationType` for details.
          type: '"Recalculate" | "Full" | "FullRebuild"'
      return:
        type: void
        description: ''
  - name: load(options)
    uid: 'office!Excel.Application#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.ApplicationLoadOptions): Excel.Application;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Excel.Interfaces.ApplicationLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Excel.Application:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.Application#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Application;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.Application:class" />'
        description: |-


          #### Examples

          ```typescript
          await Excel.run(async (context) => {
              const application = context.workbook.application;
              application.load('calculationMode');
              await context.sync();

              console.log(application.calculationMode);
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.Application#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Application;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Excel.Application:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Excel.Application#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.ApplicationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Excel.Interfaces.ApplicationUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Excel.Application#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.Application): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Excel.Application:class" />'
      return:
        type: void
        description: ''
  - name: suspendApiCalculationUntilNextSync()
    uid: 'office!Excel.Application#suspendApiCalculationUntilNextSync:member(1)'
    package: office!
    fullName: suspendApiCalculationUntilNextSync()
    summary: >-
      Suspends calculation until the next `context.sync()` is called. Once set, it is the developer's responsibility to
      re-calc the workbook, to ensure that any dependencies are propagated.
    remarks: '\[ [API set: ExcelApi 1.6](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suspendApiCalculationUntilNextSync(): void;'
      return:
        type: void
        description: ''
  - name: suspendScreenUpdatingUntilNextSync()
    uid: 'office!Excel.Application#suspendScreenUpdatingUntilNextSync:member(1)'
    package: office!
    fullName: suspendScreenUpdatingUntilNextSync()
    summary: >-
      Suspends screen updating until the next `context.sync()` is called.


      *Note**: Don't call `suspendScreenUpdatingUntilNextSync` repeatedly (such as in a loop). Repeated calls will cause
      the Excel window to flicker.
    remarks: >-
      \[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/90-scenarios/performance-optimization.yaml

      await Excel.run(async (context) => {
        // Recreate the data in the worksheet with random data.
        const sheet = context.workbook.worksheets.getActiveWorksheet();

        const startTime = Date.now();
        console.log("Starting...");

        // If other parts of the sample have toggled screen painting off, this will stop screen updating until context.sync is called.
        if (pauseScreenPainting) {
          context.application.suspendScreenUpdatingUntilNextSync();
        }

        for (let i = 1; i < ROW_COUNT; i++) {
          for (let j = 1; j < COLUMN_COUNT; j++) {
            let cell = sheet.getCell(i, j);
            cell.values = [[i * j * Math.random()]];

            // If other parts of the sample have toggled tracking off, we will avoid tracking this range and having to manage the proxy objects.
            // For more information, see https://learn.microsoft.com/office/dev/add-ins/concepts/resource-limits-and-performance-optimization#untrack-unneeded-proxy-objects
            if (untrack) {
              cell.untrack();
            }
          }
        }

        await context.sync();

        console.log(`Ending. Adding ${ROW_COUNT * COLUMN_COUNT} cells took ${Date.now() - startTime} milliseconds`);
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suspendScreenUpdatingUntilNextSync(): void;'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Excel.Application#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.Application object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Excel.Interfaces.ApplicationData`<!-- -->) that contains shallow copies of any loaded
      child properties from the original object.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.ApplicationData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.ApplicationData:interface" />'
        description: ''
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
