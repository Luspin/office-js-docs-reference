### YamlMime:TSType
name: Excel.Chart
uid: 'office!Excel.Chart:class'
package: office!
fullName: Excel.Chart
summary: >-
  Represents a chart object in a workbook. To learn more about the chart object model, see [Work with charts using the
  Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-charts)<!-- -->.
remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
example: []
isPreview: false
isDeprecated: false
type: class
properties:
  - name: axes
    uid: 'office!Excel.Chart#axes:member'
    package: office!
    fullName: axes
    summary: Represents chart axes.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly axes: Excel.ChartAxes;'
      return:
        type: '<xref uid="office!Excel.ChartAxes:class" />'
  - name: categoryLabelLevel
    uid: 'office!Excel.Chart#categoryLabelLevel:member'
    package: office!
    fullName: categoryLabelLevel
    summary: 'Specifies a chart category label level enumeration constant, referring to the level of the source category labels.'
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'categoryLabelLevel: number;'
      return:
        type: number
  - name: chartType
    uid: 'office!Excel.Chart#chartType:member'
    package: office!
    fullName: chartType
    summary: Specifies the type of the chart. See `Excel.ChartType` for details.
    remarks: '\[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" |
        "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100"
        | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" |
        "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" |
        "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" |
        "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" |
        "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" |
        "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" |
        "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" |
        "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" |
        "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" |
        "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" |
        "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" |
        "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel";
      return:
        type: >-
          <xref uid="office!Excel.ChartType:enum" /> | "Invalid" | "ColumnClustered" | "ColumnStacked" |
          "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" |
          "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" |
          "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded"
          | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" |
          "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" |
          "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" |
          "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" |
          "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" |
          "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" |
          "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" |
          "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" |
          "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie"
          | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap"
          | "Treemap" | "Waterfall" | "Sunburst" | "Funnel"
  - name: context
    uid: 'office!Excel.Chart#context:member'
    package: office!
    fullName: context
    summary: >-
      The request context associated with the object. This connects the add-in's process to the Office host
      application's process.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'context: RequestContext;'
      return:
        type: '<xref uid="office!Excel.RequestContext:class" />'
  - name: dataLabels
    uid: 'office!Excel.Chart#dataLabels:member'
    package: office!
    fullName: dataLabels
    summary: Represents the data labels on the chart.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly dataLabels: Excel.ChartDataLabels;'
      return:
        type: '<xref uid="office!Excel.ChartDataLabels:class" />'
  - name: displayBlanksAs
    uid: 'office!Excel.Chart#displayBlanksAs:member'
    package: office!
    fullName: displayBlanksAs
    summary: Specifies the way that blank cells are plotted on a chart.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'displayBlanksAs: Excel.ChartDisplayBlanksAs | "NotPlotted" | "Zero" | "Interplotted";'
      return:
        type: '<xref uid="office!Excel.ChartDisplayBlanksAs:enum" /> | "NotPlotted" | "Zero" | "Interplotted"'
  - name: format
    uid: 'office!Excel.Chart#format:member'
    package: office!
    fullName: format
    summary: Encapsulates the format properties for the chart area.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly format: Excel.ChartAreaFormat;'
      return:
        type: '<xref uid="office!Excel.ChartAreaFormat:class" />'
  - name: height
    uid: 'office!Excel.Chart#height:member'
    package: office!
    fullName: height
    summary: 'Specifies the height, in points, of the chart object.'
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'height: number;'
      return:
        type: number
  - name: id
    uid: 'office!Excel.Chart#id:member'
    package: office!
    fullName: id
    summary: The unique ID of chart.
    remarks: '\[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly id: string;'
      return:
        type: string
  - name: left
    uid: 'office!Excel.Chart#left:member'
    package: office!
    fullName: left
    summary: 'The distance, in points, from the left side of the chart to the worksheet origin.'
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'left: number;'
      return:
        type: number
  - name: legend
    uid: 'office!Excel.Chart#legend:member'
    package: office!
    fullName: legend
    summary: Represents the legend for the chart.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Set to show legend of Chart1 and make it on top of the chart.
      await Excel.run(async (context) => { 
          const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
          chart.legend.visible = true;
          chart.legend.position = "Top"; 
          chart.legend.overlay = false; 
          await context.sync()
          
          console.log("Legend Shown ");
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly legend: Excel.ChartLegend;'
      return:
        type: '<xref uid="office!Excel.ChartLegend:class" />'
  - name: name
    uid: 'office!Excel.Chart#name:member'
    package: office!
    fullName: name
    summary: Specifies the name of a chart object.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Rename the chart to new name, resize the chart to 200 points in both height and weight.
      // Move Chart1 to 100 points to the top and left.
      await Excel.run(async (context) => { 
          const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
          chart.name = "New Name";
          chart.top = 100;
          chart.left = 100;
          chart.height = 200;
          chart.width = 200;
          await context.sync(); 
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name: string;'
      return:
        type: string
  - name: pivotOptions
    uid: 'office!Excel.Chart#pivotOptions:member'
    package: office!
    fullName: pivotOptions
    summary: Encapsulates the options for a pivot chart.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly pivotOptions: Excel.ChartPivotOptions;'
      return:
        type: '<xref uid="office!Excel.ChartPivotOptions:class" />'
  - name: plotArea
    uid: 'office!Excel.Chart#plotArea:member'
    package: office!
    fullName: plotArea
    summary: Represents the plot area for the chart.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly plotArea: Excel.ChartPlotArea;'
      return:
        type: '<xref uid="office!Excel.ChartPlotArea:class" />'
  - name: plotBy
    uid: 'office!Excel.Chart#plotBy:member'
    package: office!
    fullName: plotBy
    summary: Specifies the way columns or rows are used as data series on the chart.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'plotBy: Excel.ChartPlotBy | "Rows" | "Columns";'
      return:
        type: '<xref uid="office!Excel.ChartPlotBy:enum" /> | "Rows" | "Columns"'
  - name: plotVisibleOnly
    uid: 'office!Excel.Chart#plotVisibleOnly:member'
    package: office!
    fullName: plotVisibleOnly
    summary: True if only visible cells are plotted. False if both visible and hidden cells are plotted.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'plotVisibleOnly: boolean;'
      return:
        type: boolean
  - name: series
    uid: 'office!Excel.Chart#series:member'
    package: office!
    fullName: series
    summary: Represents either a single series or collection of series in the chart.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly series: Excel.ChartSeriesCollection;'
      return:
        type: '<xref uid="office!Excel.ChartSeriesCollection:class" />'
  - name: seriesNameLevel
    uid: 'office!Excel.Chart#seriesNameLevel:member'
    package: office!
    fullName: seriesNameLevel
    summary: 'Specifies a chart series name level enumeration constant, referring to the level of the source series names.'
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'seriesNameLevel: number;'
      return:
        type: number
  - name: showAllFieldButtons
    uid: 'office!Excel.Chart#showAllFieldButtons:member'
    package: office!
    fullName: showAllFieldButtons
    summary: Specifies whether to display all field buttons on a PivotChart.
    remarks: '\[ [API set: ExcelApi 1.7](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showAllFieldButtons: boolean;'
      return:
        type: boolean
  - name: showDataLabelsOverMaximum
    uid: 'office!Excel.Chart#showDataLabelsOverMaximum:member'
    package: office!
    fullName: showDataLabelsOverMaximum
    summary: >-
      Specifies whether to show the data labels when the value is greater than the maximum value on the value axis. If
      the value axis becomes smaller than the size of the data points, you can use this property to set whether to show
      the data labels. This property applies to 2-D charts only.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showDataLabelsOverMaximum: boolean;'
      return:
        type: boolean
  - name: style
    uid: 'office!Excel.Chart#style:member'
    package: office!
    fullName: style
    summary: Specifies the chart style for the chart.
    remarks: '\[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style: number;'
      return:
        type: number
  - name: title
    uid: 'office!Excel.Chart#title:member'
    package: office!
    fullName: title
    summary: >-
      Represents the title of the specified chart, including the text, visibility, position, and formatting of the
      title.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly title: Excel.ChartTitle;'
      return:
        type: '<xref uid="office!Excel.ChartTitle:class" />'
  - name: top
    uid: 'office!Excel.Chart#top:member'
    package: office!
    fullName: top
    summary: >-
      Specifies the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top
      of the chart area (on a chart).
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'top: number;'
      return:
        type: number
  - name: width
    uid: 'office!Excel.Chart#width:member'
    package: office!
    fullName: width
    summary: 'Specifies the width, in points, of the chart object.'
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'width: number;'
      return:
        type: number
  - name: worksheet
    uid: 'office!Excel.Chart#worksheet:member'
    package: office!
    fullName: worksheet
    summary: The worksheet containing the current chart.
    remarks: '\[ [API set: ExcelApi 1.2](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type: '<xref uid="office!Excel.Worksheet:class" />'
methods:
  - name: activate()
    uid: 'office!Excel.Chart#activate:member(1)'
    package: office!
    fullName: activate()
    summary: Activates the chart in the Excel UI.
    remarks: '\[ [API set: ExcelApi 1.9](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'activate(): void;'
      return:
        type: void
        description: ''
  - name: delete()
    uid: 'office!Excel.Chart#delete:member(1)'
    package: office!
    fullName: delete()
    summary: Deletes the chart object.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      await Excel.run(async (context) => { 
          const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
          chart.delete();
          await context.sync(); 
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'delete(): void;'
      return:
        type: void
        description: ''
  - name: getDataRange()
    uid: 'office!Excel.Chart#getDataRange:member(1)'
    package: office!
    fullName: getDataRange()
    summary: >-
      Gets the data source of the whole chart. If the data range is empty, this method will return the
      `EmptyChartSeries` error.
    remarks: '\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getDataRange(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getDataRangeOrNullObject()
    uid: 'office!Excel.Chart#getDataRangeOrNullObject:member(1)'
    package: office!
    fullName: getDataRangeOrNullObject()
    summary: >-
      Gets the data source of the whole chart. If the data range is empty, then this method returns an object with its
      `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: '\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: true
    isDeprecated: false
    syntax:
      content: 'getDataRangeOrNullObject(): OfficeExtension.ClientResult<string>;'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: getDataTable()
    uid: 'office!Excel.Chart#getDataTable:member(1)'
    package: office!
    fullName: getDataTable()
    summary: 'Gets the data table on the chart. If the chart doesn''t allow a data table, it will throw an exception.'
    remarks: '\[ [API set: ExcelApi 1.14](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataTable(): Excel.ChartDataTable;'
      return:
        type: '<xref uid="office!Excel.ChartDataTable:class" />'
        description: ''
  - name: getDataTableOrNullObject()
    uid: 'office!Excel.Chart#getDataTableOrNullObject:member(1)'
    package: office!
    fullName: getDataTableOrNullObject()
    summary: >-
      Gets the data table on the chart. If the chart doesn't allow a data table, then this method returns an object with
      its `isNullObject` property set to `true`<!-- -->. For further information, see [*OrNullObject methods and
      properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!--
      -->.
    remarks: >-
      \[ [API set: ExcelApi 1.14](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-data-table.yaml

      // This function adds a data table to a chart that already exists on the worksheet. 

      await Excel.run(async (context) => {
        // Retrieve the chart named "SalesChart" from the "Sample" worksheet.
        const chart = context.workbook.worksheets.getItem("Sample").charts.getItem("SalesChart");

        // Get the data table object for the chart and set it to visible.
        const chartDataTable = chart.getDataTableOrNullObject();
        chartDataTable.load("visible");
        chartDataTable.visible = true;
        await context.sync();
      });

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'getDataTableOrNullObject(): Excel.ChartDataTable;'
      return:
        type: '<xref uid="office!Excel.ChartDataTable:class" />'
        description: ''
  - name: 'getImage(width, height, fittingMode)'
    uid: 'office!Excel.Chart#getImage:member(1)'
    package: office!
    fullName: 'getImage(width, height, fittingMode)'
    summary: >-
      Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions. The aspect ratio
      is preserved as part of the resizing.
    remarks: |-
      \[ [API set: ExcelApi 1.2](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      await Excel.run(async (context) => { 
          const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
          const image = chart.getImage();
          await context.sync(); 
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getImage(width?: number, height?: number, fittingMode?: Excel.ImageFittingMode):
        OfficeExtension.ClientResult<string>;
      parameters:
        - id: width
          description: Optional. The desired width of the resulting image.
          type: number
        - id: height
          description: Optional. The desired height of the resulting image.
          type: number
        - id: fittingMode
          description: Optional. The method used to scale the chart to the specified dimensions (if both height and width are set).
          type: '<xref uid="office!Excel.ImageFittingMode:enum" />'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: 'getImage(width, height, fittingMode)'
    uid: 'office!Excel.Chart#getImage:member(2)'
    package: office!
    fullName: 'getImage(width, height, fittingMode)'
    summary: >-
      Renders the chart as a base64-encoded image by scaling the chart to fit the specified dimensions. The aspect ratio
      is preserved as part of the resizing.
    remarks: '\[ [API set: ExcelApi 1.2](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getImage(width?: number, height?: number, fittingMode?: "Fit" | "FitAndCenter" | "Fill"):
        OfficeExtension.ClientResult<string>;
      parameters:
        - id: width
          description: Optional. The desired width of the resulting image.
          type: number
        - id: height
          description: Optional. The desired height of the resulting image.
          type: number
        - id: fittingMode
          description: Optional. The method used to scale the chart to the specified dimensions (if both height and width are set).
          type: '"Fit" | "FitAndCenter" | "Fill"'
      return:
        type: '<xref uid="office!OfficeExtension.ClientResult:class" />&lt;string&gt;'
        description: ''
  - name: load(options)
    uid: 'office!Excel.Chart#load:member(1)'
    package: office!
    fullName: load(options)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(options?: Excel.Interfaces.ChartLoadOptions): Excel.Chart;'
      parameters:
        - id: options
          description: Provides options for which properties of the object to load.
          type: '<xref uid="office!Excel.Interfaces.ChartLoadOptions:interface" />'
      return:
        type: '<xref uid="office!Excel.Chart:class" />'
        description: ''
  - name: load(propertyNames)
    uid: 'office!Excel.Chart#load:member(2)'
    package: office!
    fullName: load(propertyNames)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Chart;'
      parameters:
        - id: propertyNames
          description: A comma-delimited string or an array of strings that specify the properties to load.
          type: 'string | string[]'
      return:
        type: '<xref uid="office!Excel.Chart:class" />'
        description: |-


          #### Examples

          ```typescript
          // Get a chart named "Chart1".
          await Excel.run(async (context) => { 
              const chart = context.workbook.worksheets.getItem("Sheet1").charts.getItem("Chart1");    
              chart.load('name');
              await context.sync();

              console.log(chart.name);
          });
          ```
  - name: load(propertyNamesAndPaths)
    uid: 'office!Excel.Chart#load:member(3)'
    package: office!
    fullName: load(propertyNamesAndPaths)
    summary: >-
      Queues up a command to load the specified properties of the object. You must call `context.sync()` before reading
      the properties.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Chart;
      parameters:
        - id: propertyNamesAndPaths
          description: >-
            `propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and
            `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.
          type: |-
            {
                        select?: string;
                        expand?: string;
                    }
      return:
        type: '<xref uid="office!Excel.Chart:class" />'
        description: ''
  - name: 'set(properties, options)'
    uid: 'office!Excel.Chart#set:member(1)'
    package: office!
    fullName: 'set(properties, options)'
    summary: >-
      Sets multiple properties of an object at the same time. You can pass either a plain object with the appropriate
      properties, or another API object of the same type.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Interfaces.ChartUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      parameters:
        - id: properties
          description: >-
            A JavaScript object with properties that are structured isomorphically to the properties of the object on
            which the method is called.
          type: '<xref uid="office!Excel.Interfaces.ChartUpdateData:interface" />'
        - id: options
          description: Provides an option to suppress errors if the properties object tries to set any read-only properties.
          type: '<xref uid="office!OfficeExtension.UpdateOptions:interface" />'
      return:
        type: void
        description: ''
  - name: set(properties)
    uid: 'office!Excel.Chart#set:member(2)'
    package: office!
    fullName: set(properties)
    summary: 'Sets multiple properties on the object at the same time, based on an existing loaded object.'
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'set(properties: Excel.Chart): void;'
      parameters:
        - id: properties
          description: ''
          type: '<xref uid="office!Excel.Chart:class" />'
      return:
        type: void
        description: ''
  - name: 'setData(sourceData, seriesBy)'
    uid: 'office!Excel.Chart#setData:member(1)'
    package: office!
    fullName: 'setData(sourceData, seriesBy)'
    summary: Resets the source data for the chart.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      // Set the sourceData to be the range at "A1:B4" and seriesBy to be "Columns".
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sheet1");
          const chart = sheet.charts.getItem("Chart1");
          const sourceData = sheet.getRange("A1:B4");
          chart.setData(sourceData, "Columns");
          await context.sync();
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setData(sourceData: Range, seriesBy?: Excel.ChartSeriesBy): void;'
      parameters:
        - id: sourceData
          description: The range object corresponding to the source data.
          type: '<xref uid="office!Excel.Range:class" />'
        - id: seriesBy
          description: >-
            Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto
            (default), Rows, and Columns. See `Excel.ChartSeriesBy` for details.
          type: '<xref uid="office!Excel.ChartSeriesBy:enum" />'
      return:
        type: void
        description: ''
  - name: 'setData(sourceData, seriesBy)'
    uid: 'office!Excel.Chart#setData:member(2)'
    package: office!
    fullName: 'setData(sourceData, seriesBy)'
    summary: Resets the source data for the chart.
    remarks: '\[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]'
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setData(sourceData: Range, seriesBy?: "Auto" | "Columns" | "Rows"): void;'
      parameters:
        - id: sourceData
          description: The range object corresponding to the source data.
          type: '<xref uid="office!Excel.Range:class" />'
        - id: seriesBy
          description: >-
            Specifies the way columns or rows are used as data series on the chart. Can be one of the following: Auto
            (default), Rows, and Columns. See `Excel.ChartSeriesBy` for details.
          type: '"Auto" | "Columns" | "Rows"'
      return:
        type: void
        description: ''
  - name: 'setPosition(startCell, endCell)'
    uid: 'office!Excel.Chart#setPosition:member(1)'
    package: office!
    fullName: 'setPosition(startCell, endCell)'
    summary: Positions the chart relative to cells on the worksheet.
    remarks: |-
      \[ [API set: ExcelApi 1.1](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]

      #### Examples

      ```typescript
      await Excel.run(async (context) => { 
          const sheetName = "Charts";
          const rangeSelection = "A1:B4";
          const range = context.workbook.worksheets.getItem(sheetName).getRange(rangeSelection);
          const sourceData = sheetName + "!" + "A1:B4";
          const chart = context.workbook.worksheets.getItem(sheetName).charts.add("pie", range, "auto");
          chart.width = 500;
          chart.height = 300;
          chart.setPosition("C2", null);
          await context.sync(); 
      });
      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'setPosition(startCell: Range | string, endCell?: Range | string): void;'
      parameters:
        - id: startCell
          description: >-
            The start cell. This is where the chart will be moved to. The start cell is the top-left or top-right cell,
            depending on the user's right-to-left display settings.
          type: '<xref uid="office!Excel.Range:class" /> | string'
        - id: endCell
          description: >-
            Optional. The end cell. If specified, the chart's width and height will be set to fully cover up this
            cell/range.
          type: '<xref uid="office!Excel.Range:class" /> | string'
      return:
        type: void
        description: ''
  - name: toJSON()
    uid: 'office!Excel.Chart#toJSON:member(1)'
    package: office!
    fullName: toJSON()
    summary: >-
      Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to
      `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is
      passed to it.) Whereas the original Excel.Chart object is an API object, the `toJSON` method returns a plain
      JavaScript object (typed as `Excel.Interfaces.ChartData`<!-- -->) that contains shallow copies of any loaded child
      properties from the original object.
    remarks: ''
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toJSON(): Excel.Interfaces.ChartData;'
      return:
        type: '<xref uid="office!Excel.Interfaces.ChartData:interface" />'
        description: ''
events:
  - name: onActivated
    uid: 'office!Excel.Chart#onActivated:member'
    package: office!
    fullName: onActivated
    summary: Occurs when the chart is activated.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

      await Excel.run(async (context) => {

          const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");

          // Register the onActivated and onDeactivated event handlers.
          pieChart.onActivated.add(chartActivated);
          pieChart.onDeactivated.add(chartDeactivated);

          await context.sync();

          console.log("Added handlers for Chart onActivated and onDeactivated events.");
      });


      ...

      async function chartActivated(event) {
          await Excel.run(async (context) => {
              // Retrieve the worksheet.
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Retrieve the activated chart by ID and load the name of the chart. 
              const activatedChart = sheet.charts.getItem(event.chartId);
              activatedChart.load(["name"]);
              await context.sync();

              // Print out the activated chart's data.
              console.log(`A chart was activated. ID: ${event.chartId}. Chart name: ${activatedChart.name}.`);
          });
      }

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="office!Excel.ChartActivatedEventArgs:interface" />&gt;
  - name: onDeactivated
    uid: 'office!Excel.Chart#onDeactivated:member'
    package: office!
    fullName: onDeactivated
    summary: Occurs when the chart is deactivated.
    remarks: >-
      \[ [API set: ExcelApi 1.8](/javascript/api/requirement-sets/excel/excel-api-requirement-sets) \]


      #### Examples


      ```typescript

      // Link to full sample:
      https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-chart-activated.yaml

      await Excel.run(async (context) => {

          const pieChart = context.workbook.worksheets.getActiveWorksheet().charts.getItem("Pie");

          // Register the onActivated and onDeactivated event handlers.
          pieChart.onActivated.add(chartActivated);
          pieChart.onDeactivated.add(chartDeactivated);

          await context.sync();

          console.log("Added handlers for Chart onActivated and onDeactivated events.");
      });


      ...

      async function chartDeactivated(event) {
          await Excel.run(async (context) => {
              // Callback function for when the chart is deactivated.
              console.log("The pie chart is NOT active.");
          });
      }

      ```
    example: []
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
      return:
        type: >-
          <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref
          uid="office!Excel.ChartDeactivatedEventArgs:interface" />&gt;
extends: '<xref uid="office!OfficeExtension.ClientObject:class" />'
